//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c:/Backup/_Source/Git/SimpleC/SimpleC.ParserGenerator/Grammar/C.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class CParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, Auto=20, Break=21, Case=22, Char=23, Const=24, Continue=25, 
		Default=26, Do=27, Double=28, Else=29, Enum=30, Extern=31, Float=32, For=33, 
		Goto=34, If=35, Inline=36, Int=37, Long=38, Register=39, Restrict=40, 
		Return=41, Short=42, Signed=43, Sizeof=44, Static=45, Struct=46, Switch=47, 
		Typedef=48, Union=49, Unsigned=50, Void=51, Volatile=52, While=53, Alignas=54, 
		Alignof=55, Atomic=56, Bool=57, Complex=58, Generic=59, Imaginary=60, 
		Noreturn=61, StaticAssert=62, ThreadLocal=63, LeftParen=64, RightParen=65, 
		LeftBracket=66, RightBracket=67, LeftBrace=68, RightBrace=69, Less=70, 
		LessEqual=71, Greater=72, GreaterEqual=73, LeftShift=74, RightShift=75, 
		Plus=76, PlusPlus=77, Minus=78, MinusMinus=79, Star=80, Div=81, Mod=82, 
		And=83, Or=84, AndAnd=85, OrOr=86, Caret=87, Not=88, Tilde=89, Question=90, 
		Colon=91, Semi=92, Comma=93, Assign=94, StarAssign=95, DivAssign=96, ModAssign=97, 
		PlusAssign=98, MinusAssign=99, LeftShiftAssign=100, RightShiftAssign=101, 
		AndAssign=102, XorAssign=103, OrAssign=104, Equal=105, NotEqual=106, Arrow=107, 
		Dot=108, Ellipsis=109, Identifier=110, Constant=111, DigitSequence=112, 
		StringLiteral=113, MultiLineMacro=114, Directive=115, AsmBlock=116, Whitespace=117, 
		Newline=118, BlockComment=119, LineComment=120;
	public const int
		RULE_primaryExpression = 0, RULE_genericSelection = 1, RULE_genericAssocList = 2, 
		RULE_genericAssociation = 3, RULE_postfixExpression = 4, RULE_argumentExpressionList = 5, 
		RULE_unaryExpression = 6, RULE_unaryOperator = 7, RULE_castExpression = 8, 
		RULE_multiplicativeExpression = 9, RULE_additiveExpression = 10, RULE_shiftExpression = 11, 
		RULE_relationalExpression = 12, RULE_equalityExpression = 13, RULE_andExpression = 14, 
		RULE_exclusiveOrExpression = 15, RULE_inclusiveOrExpression = 16, RULE_logicalAndExpression = 17, 
		RULE_logicalOrExpression = 18, RULE_conditionalExpression = 19, RULE_assignmentExpression = 20, 
		RULE_assignmentOperator = 21, RULE_expression = 22, RULE_constantExpression = 23, 
		RULE_declaration = 24, RULE_declarationSpecifiers = 25, RULE_declarationSpecifiers2 = 26, 
		RULE_declarationSpecifier = 27, RULE_initDeclaratorList = 28, RULE_initDeclarator = 29, 
		RULE_storageClassSpecifier = 30, RULE_typeSpecifier = 31, RULE_structOrUnionSpecifier = 32, 
		RULE_structOrUnion = 33, RULE_structDeclarationList = 34, RULE_structDeclaration = 35, 
		RULE_specifierQualifierList = 36, RULE_structDeclaratorList = 37, RULE_structDeclarator = 38, 
		RULE_enumSpecifier = 39, RULE_enumeratorList = 40, RULE_enumerator = 41, 
		RULE_enumerationConstant = 42, RULE_atomicTypeSpecifier = 43, RULE_typeQualifier = 44, 
		RULE_functionSpecifier = 45, RULE_alignmentSpecifier = 46, RULE_declarator = 47, 
		RULE_directDeclarator = 48, RULE_vcSpecificModifer = 49, RULE_gccDeclaratorExtension = 50, 
		RULE_gccAttributeSpecifier = 51, RULE_gccAttributeList = 52, RULE_gccAttribute = 53, 
		RULE_pointer = 54, RULE_typeQualifierList = 55, RULE_parameterTypeList = 56, 
		RULE_parameterList = 57, RULE_parameterDeclaration = 58, RULE_identifierList = 59, 
		RULE_typeName = 60, RULE_abstractDeclarator = 61, RULE_directAbstractDeclarator = 62, 
		RULE_typedefName = 63, RULE_initializer = 64, RULE_initializerList = 65, 
		RULE_designation = 66, RULE_designatorList = 67, RULE_designator = 68, 
		RULE_staticAssertDeclaration = 69, RULE_statement = 70, RULE_labeledStatement = 71, 
		RULE_compoundStatement = 72, RULE_blockItemList = 73, RULE_blockItem = 74, 
		RULE_expressionStatement = 75, RULE_selectionStatement = 76, RULE_iterationStatement = 77, 
		RULE_forCondition = 78, RULE_forDeclaration = 79, RULE_forExpression = 80, 
		RULE_jumpStatement = 81, RULE_compilationUnit = 82, RULE_translationUnit = 83, 
		RULE_externalDeclaration = 84, RULE_functionDefinition = 85, RULE_declarationList = 86;
	public static readonly string[] ruleNames = {
		"primaryExpression", "genericSelection", "genericAssocList", "genericAssociation", 
		"postfixExpression", "argumentExpressionList", "unaryExpression", "unaryOperator", 
		"castExpression", "multiplicativeExpression", "additiveExpression", "shiftExpression", 
		"relationalExpression", "equalityExpression", "andExpression", "exclusiveOrExpression", 
		"inclusiveOrExpression", "logicalAndExpression", "logicalOrExpression", 
		"conditionalExpression", "assignmentExpression", "assignmentOperator", 
		"expression", "constantExpression", "declaration", "declarationSpecifiers", 
		"declarationSpecifiers2", "declarationSpecifier", "initDeclaratorList", 
		"initDeclarator", "storageClassSpecifier", "typeSpecifier", "structOrUnionSpecifier", 
		"structOrUnion", "structDeclarationList", "structDeclaration", "specifierQualifierList", 
		"structDeclaratorList", "structDeclarator", "enumSpecifier", "enumeratorList", 
		"enumerator", "enumerationConstant", "atomicTypeSpecifier", "typeQualifier", 
		"functionSpecifier", "alignmentSpecifier", "declarator", "directDeclarator", 
		"vcSpecificModifer", "gccDeclaratorExtension", "gccAttributeSpecifier", 
		"gccAttributeList", "gccAttribute", "pointer", "typeQualifierList", "parameterTypeList", 
		"parameterList", "parameterDeclaration", "identifierList", "typeName", 
		"abstractDeclarator", "directAbstractDeclarator", "typedefName", "initializer", 
		"initializerList", "designation", "designatorList", "designator", "staticAssertDeclaration", 
		"statement", "labeledStatement", "compoundStatement", "blockItemList", 
		"blockItem", "expressionStatement", "selectionStatement", "iterationStatement", 
		"forCondition", "forDeclaration", "forExpression", "jumpStatement", "compilationUnit", 
		"translationUnit", "externalDeclaration", "functionDefinition", "declarationList"
	};

	private static readonly string[] _LiteralNames = {
		null, "'__extension__'", "'__builtin_va_arg'", "'__builtin_offsetof'", 
		"'__m128'", "'__m128d'", "'__m128i'", "'__typeof__'", "'__inline__'", 
		"'__stdcall'", "'__declspec'", "'__cdecl'", "'__clrcall'", "'__fastcall'", 
		"'__thiscall'", "'__vectorcall'", "'__asm'", "'__attribute__'", "'__asm__'", 
		"'__volatile__'", "'auto'", "'break'", "'case'", "'char'", "'const'", 
		"'continue'", "'default'", "'do'", "'double'", "'else'", "'enum'", "'extern'", 
		"'float'", "'for'", "'goto'", "'if'", "'inline'", "'int'", "'long'", "'register'", 
		"'restrict'", "'return'", "'short'", "'signed'", "'sizeof'", "'static'", 
		"'struct'", "'switch'", "'typedef'", "'union'", "'unsigned'", "'void'", 
		"'volatile'", "'while'", "'_Alignas'", "'_Alignof'", "'_Atomic'", "'_Bool'", 
		"'_Complex'", "'_Generic'", "'_Imaginary'", "'_Noreturn'", "'_Static_assert'", 
		"'_Thread_local'", "'('", "')'", "'['", "']'", "'{'", "'}'", "'<'", "'<='", 
		"'>'", "'>='", "'<<'", "'>>'", "'+'", "'++'", "'-'", "'--'", "'*'", "'/'", 
		"'%'", "'&'", "'|'", "'&&'", "'||'", "'^'", "'!'", "'~'", "'?'", "':'", 
		"';'", "','", "'='", "'*='", "'/='", "'%='", "'+='", "'-='", "'<<='", 
		"'>>='", "'&='", "'^='", "'|='", "'=='", "'!='", "'->'", "'.'", "'...'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, "Auto", "Break", "Case", 
		"Char", "Const", "Continue", "Default", "Do", "Double", "Else", "Enum", 
		"Extern", "Float", "For", "Goto", "If", "Inline", "Int", "Long", "Register", 
		"Restrict", "Return", "Short", "Signed", "Sizeof", "Static", "Struct", 
		"Switch", "Typedef", "Union", "Unsigned", "Void", "Volatile", "While", 
		"Alignas", "Alignof", "Atomic", "Bool", "Complex", "Generic", "Imaginary", 
		"Noreturn", "StaticAssert", "ThreadLocal", "LeftParen", "RightParen", 
		"LeftBracket", "RightBracket", "LeftBrace", "RightBrace", "Less", "LessEqual", 
		"Greater", "GreaterEqual", "LeftShift", "RightShift", "Plus", "PlusPlus", 
		"Minus", "MinusMinus", "Star", "Div", "Mod", "And", "Or", "AndAnd", "OrOr", 
		"Caret", "Not", "Tilde", "Question", "Colon", "Semi", "Comma", "Assign", 
		"StarAssign", "DivAssign", "ModAssign", "PlusAssign", "MinusAssign", "LeftShiftAssign", 
		"RightShiftAssign", "AndAssign", "XorAssign", "OrAssign", "Equal", "NotEqual", 
		"Arrow", "Dot", "Ellipsis", "Identifier", "Constant", "DigitSequence", 
		"StringLiteral", "MultiLineMacro", "Directive", "AsmBlock", "Whitespace", 
		"Newline", "BlockComment", "LineComment"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "C.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static CParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public CParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public CParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class PrimaryExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(CParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Constant() { return GetToken(CParser.Constant, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] StringLiteral() { return GetTokens(CParser.StringLiteral); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringLiteral(int i) {
			return GetToken(CParser.StringLiteral, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParen() { return GetToken(CParser.LeftParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParen() { return GetToken(CParser.RightParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public GenericSelectionContext genericSelection() {
			return GetRuleContext<GenericSelectionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CompoundStatementContext compoundStatement() {
			return GetRuleContext<CompoundStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnaryExpressionContext unaryExpression() {
			return GetRuleContext<UnaryExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma() { return GetToken(CParser.Comma, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public PrimaryExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primaryExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.EnterPrimaryExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.ExitPrimaryExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimaryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryExpressionContext primaryExpression() {
		PrimaryExpressionContext _localctx = new PrimaryExpressionContext(Context, State);
		EnterRule(_localctx, 0, RULE_primaryExpression);
		int _la;
		try {
			State = 207;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 174;
				Match(Identifier);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 175;
				Match(Constant);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 177;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 176;
					Match(StringLiteral);
					}
					}
					State = 179;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==StringLiteral );
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 181;
				Match(LeftParen);
				State = 182;
				expression();
				State = 183;
				Match(RightParen);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 185;
				genericSelection();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 187;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__0) {
					{
					State = 186;
					Match(T__0);
					}
				}

				State = 189;
				Match(LeftParen);
				State = 190;
				compoundStatement();
				State = 191;
				Match(RightParen);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 193;
				Match(T__1);
				State = 194;
				Match(LeftParen);
				State = 195;
				unaryExpression();
				State = 196;
				Match(Comma);
				State = 197;
				typeName();
				State = 198;
				Match(RightParen);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 200;
				Match(T__2);
				State = 201;
				Match(LeftParen);
				State = 202;
				typeName();
				State = 203;
				Match(Comma);
				State = 204;
				unaryExpression();
				State = 205;
				Match(RightParen);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GenericSelectionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Generic() { return GetToken(CParser.Generic, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParen() { return GetToken(CParser.LeftParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentExpressionContext assignmentExpression() {
			return GetRuleContext<AssignmentExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma() { return GetToken(CParser.Comma, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public GenericAssocListContext genericAssocList() {
			return GetRuleContext<GenericAssocListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParen() { return GetToken(CParser.RightParen, 0); }
		public GenericSelectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_genericSelection; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.EnterGenericSelection(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.ExitGenericSelection(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGenericSelection(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GenericSelectionContext genericSelection() {
		GenericSelectionContext _localctx = new GenericSelectionContext(Context, State);
		EnterRule(_localctx, 2, RULE_genericSelection);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 209;
			Match(Generic);
			State = 210;
			Match(LeftParen);
			State = 211;
			assignmentExpression();
			State = 212;
			Match(Comma);
			State = 213;
			genericAssocList();
			State = 214;
			Match(RightParen);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GenericAssocListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public GenericAssociationContext[] genericAssociation() {
			return GetRuleContexts<GenericAssociationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public GenericAssociationContext genericAssociation(int i) {
			return GetRuleContext<GenericAssociationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(CParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(CParser.Comma, i);
		}
		public GenericAssocListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_genericAssocList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.EnterGenericAssocList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.ExitGenericAssocList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGenericAssocList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GenericAssocListContext genericAssocList() {
		GenericAssocListContext _localctx = new GenericAssocListContext(Context, State);
		EnterRule(_localctx, 4, RULE_genericAssocList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 216;
			genericAssociation();
			State = 221;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 217;
				Match(Comma);
				State = 218;
				genericAssociation();
				}
				}
				State = 223;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GenericAssociationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(CParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentExpressionContext assignmentExpression() {
			return GetRuleContext<AssignmentExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Default() { return GetToken(CParser.Default, 0); }
		public GenericAssociationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_genericAssociation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.EnterGenericAssociation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.ExitGenericAssociation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGenericAssociation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GenericAssociationContext genericAssociation() {
		GenericAssociationContext _localctx = new GenericAssociationContext(Context, State);
		EnterRule(_localctx, 6, RULE_genericAssociation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 226;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__0:
			case T__3:
			case T__4:
			case T__5:
			case T__6:
			case Char:
			case Const:
			case Double:
			case Enum:
			case Float:
			case Int:
			case Long:
			case Restrict:
			case Short:
			case Signed:
			case Struct:
			case Union:
			case Unsigned:
			case Void:
			case Volatile:
			case Atomic:
			case Bool:
			case Complex:
			case Identifier:
				{
				State = 224;
				typeName();
				}
				break;
			case Default:
				{
				State = 225;
				Match(Default);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 228;
			Match(Colon);
			State = 229;
			assignmentExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PostfixExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrimaryExpressionContext primaryExpression() {
			return GetRuleContext<PrimaryExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LeftParen() { return GetTokens(CParser.LeftParen); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParen(int i) {
			return GetToken(CParser.LeftParen, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RightParen() { return GetTokens(CParser.RightParen); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParen(int i) {
			return GetToken(CParser.RightParen, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftBrace() { return GetToken(CParser.LeftBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InitializerListContext initializerList() {
			return GetRuleContext<InitializerListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightBrace() { return GetToken(CParser.RightBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LeftBracket() { return GetTokens(CParser.LeftBracket); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftBracket(int i) {
			return GetToken(CParser.LeftBracket, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RightBracket() { return GetTokens(CParser.RightBracket); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightBracket(int i) {
			return GetToken(CParser.RightBracket, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Identifier() { return GetTokens(CParser.Identifier); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier(int i) {
			return GetToken(CParser.Identifier, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] PlusPlus() { return GetTokens(CParser.PlusPlus); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PlusPlus(int i) {
			return GetToken(CParser.PlusPlus, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MinusMinus() { return GetTokens(CParser.MinusMinus); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MinusMinus(int i) {
			return GetToken(CParser.MinusMinus, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Dot() { return GetTokens(CParser.Dot); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dot(int i) {
			return GetToken(CParser.Dot, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Arrow() { return GetTokens(CParser.Arrow); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Arrow(int i) {
			return GetToken(CParser.Arrow, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma() { return GetToken(CParser.Comma, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentExpressionListContext[] argumentExpressionList() {
			return GetRuleContexts<ArgumentExpressionListContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentExpressionListContext argumentExpressionList(int i) {
			return GetRuleContext<ArgumentExpressionListContext>(i);
		}
		public PostfixExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_postfixExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.EnterPostfixExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.ExitPostfixExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPostfixExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PostfixExpressionContext postfixExpression() {
		PostfixExpressionContext _localctx = new PostfixExpressionContext(Context, State);
		EnterRule(_localctx, 8, RULE_postfixExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 245;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				{
				State = 231;
				primaryExpression();
				}
				break;
			case 2:
				{
				State = 233;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__0) {
					{
					State = 232;
					Match(T__0);
					}
				}

				State = 235;
				Match(LeftParen);
				State = 236;
				typeName();
				State = 237;
				Match(RightParen);
				State = 238;
				Match(LeftBrace);
				State = 239;
				initializerList();
				State = 241;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Comma) {
					{
					State = 240;
					Match(Comma);
					}
				}

				State = 243;
				Match(RightBrace);
				}
				break;
			}
			State = 262;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 26388279107589L) != 0)) {
				{
				State = 260;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case LeftBracket:
					{
					State = 247;
					Match(LeftBracket);
					State = 248;
					expression();
					State = 249;
					Match(RightBracket);
					}
					break;
				case LeftParen:
					{
					State = 251;
					Match(LeftParen);
					State = 253;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 612507141508431886L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 1055531215745025L) != 0)) {
						{
						State = 252;
						argumentExpressionList();
						}
					}

					State = 255;
					Match(RightParen);
					}
					break;
				case Arrow:
				case Dot:
					{
					State = 256;
					_la = TokenStream.LA(1);
					if ( !(_la==Arrow || _la==Dot) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 257;
					Match(Identifier);
					}
					break;
				case PlusPlus:
					{
					State = 258;
					Match(PlusPlus);
					}
					break;
				case MinusMinus:
					{
					State = 259;
					Match(MinusMinus);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 264;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentExpressionListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentExpressionContext[] assignmentExpression() {
			return GetRuleContexts<AssignmentExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentExpressionContext assignmentExpression(int i) {
			return GetRuleContext<AssignmentExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(CParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(CParser.Comma, i);
		}
		public ArgumentExpressionListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argumentExpressionList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.EnterArgumentExpressionList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.ExitArgumentExpressionList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgumentExpressionList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentExpressionListContext argumentExpressionList() {
		ArgumentExpressionListContext _localctx = new ArgumentExpressionListContext(Context, State);
		EnterRule(_localctx, 10, RULE_argumentExpressionList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 265;
			assignmentExpression();
			State = 270;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 266;
				Match(Comma);
				State = 267;
				assignmentExpression();
				}
				}
				State = 272;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnaryExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PostfixExpressionContext postfixExpression() {
			return GetRuleContext<PostfixExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnaryOperatorContext unaryOperator() {
			return GetRuleContext<UnaryOperatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CastExpressionContext castExpression() {
			return GetRuleContext<CastExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParen() { return GetToken(CParser.LeftParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParen() { return GetToken(CParser.RightParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AndAnd() { return GetToken(CParser.AndAnd, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(CParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Sizeof() { return GetTokens(CParser.Sizeof); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Sizeof(int i) {
			return GetToken(CParser.Sizeof, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Alignof() { return GetToken(CParser.Alignof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] PlusPlus() { return GetTokens(CParser.PlusPlus); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PlusPlus(int i) {
			return GetToken(CParser.PlusPlus, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MinusMinus() { return GetTokens(CParser.MinusMinus); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MinusMinus(int i) {
			return GetToken(CParser.MinusMinus, i);
		}
		public UnaryExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unaryExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.EnterUnaryExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.ExitUnaryExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnaryExpressionContext unaryExpression() {
		UnaryExpressionContext _localctx = new UnaryExpressionContext(Context, State);
		EnterRule(_localctx, 12, RULE_unaryExpression);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 276;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 273;
					_la = TokenStream.LA(1);
					if ( !(((((_la - 44)) & ~0x3f) == 0 && ((1L << (_la - 44)) & 42949672961L) != 0)) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					} 
				}
				State = 278;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
			}
			State = 290;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__0:
			case T__1:
			case T__2:
			case Generic:
			case LeftParen:
			case Identifier:
			case Constant:
			case StringLiteral:
				{
				State = 279;
				postfixExpression();
				}
				break;
			case Plus:
			case Minus:
			case Star:
			case And:
			case Not:
			case Tilde:
				{
				State = 280;
				unaryOperator();
				State = 281;
				castExpression();
				}
				break;
			case Sizeof:
			case Alignof:
				{
				State = 283;
				_la = TokenStream.LA(1);
				if ( !(_la==Sizeof || _la==Alignof) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 284;
				Match(LeftParen);
				State = 285;
				typeName();
				State = 286;
				Match(RightParen);
				}
				break;
			case AndAnd:
				{
				State = 288;
				Match(AndAnd);
				State = 289;
				Match(Identifier);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnaryOperatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode And() { return GetToken(CParser.And, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Star() { return GetToken(CParser.Star, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Plus() { return GetToken(CParser.Plus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Minus() { return GetToken(CParser.Minus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Tilde() { return GetToken(CParser.Tilde, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Not() { return GetToken(CParser.Not, 0); }
		public UnaryOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unaryOperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.EnterUnaryOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.ExitUnaryOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnaryOperatorContext unaryOperator() {
		UnaryOperatorContext _localctx = new UnaryOperatorContext(Context, State);
		EnterRule(_localctx, 14, RULE_unaryOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 292;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 76)) & ~0x3f) == 0 && ((1L << (_la - 76)) & 12437L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CastExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParen() { return GetToken(CParser.LeftParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParen() { return GetToken(CParser.RightParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CastExpressionContext castExpression() {
			return GetRuleContext<CastExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnaryExpressionContext unaryExpression() {
			return GetRuleContext<UnaryExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DigitSequence() { return GetToken(CParser.DigitSequence, 0); }
		public CastExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_castExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.EnterCastExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.ExitCastExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCastExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CastExpressionContext castExpression() {
		CastExpressionContext _localctx = new CastExpressionContext(Context, State);
		EnterRule(_localctx, 16, RULE_castExpression);
		int _la;
		try {
			State = 304;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 295;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__0) {
					{
					State = 294;
					Match(T__0);
					}
				}

				State = 297;
				Match(LeftParen);
				State = 298;
				typeName();
				State = 299;
				Match(RightParen);
				State = 300;
				castExpression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 302;
				unaryExpression();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 303;
				Match(DigitSequence);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultiplicativeExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CastExpressionContext[] castExpression() {
			return GetRuleContexts<CastExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CastExpressionContext castExpression(int i) {
			return GetRuleContext<CastExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Star() { return GetTokens(CParser.Star); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Star(int i) {
			return GetToken(CParser.Star, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Div() { return GetTokens(CParser.Div); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Div(int i) {
			return GetToken(CParser.Div, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Mod() { return GetTokens(CParser.Mod); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Mod(int i) {
			return GetToken(CParser.Mod, i);
		}
		public MultiplicativeExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiplicativeExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.EnterMultiplicativeExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.ExitMultiplicativeExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplicativeExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultiplicativeExpressionContext multiplicativeExpression() {
		MultiplicativeExpressionContext _localctx = new MultiplicativeExpressionContext(Context, State);
		EnterRule(_localctx, 18, RULE_multiplicativeExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 306;
			castExpression();
			State = 311;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 80)) & ~0x3f) == 0 && ((1L << (_la - 80)) & 7L) != 0)) {
				{
				{
				State = 307;
				_la = TokenStream.LA(1);
				if ( !(((((_la - 80)) & ~0x3f) == 0 && ((1L << (_la - 80)) & 7L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 308;
				castExpression();
				}
				}
				State = 313;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AdditiveExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MultiplicativeExpressionContext[] multiplicativeExpression() {
			return GetRuleContexts<MultiplicativeExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MultiplicativeExpressionContext multiplicativeExpression(int i) {
			return GetRuleContext<MultiplicativeExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Plus() { return GetTokens(CParser.Plus); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Plus(int i) {
			return GetToken(CParser.Plus, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Minus() { return GetTokens(CParser.Minus); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Minus(int i) {
			return GetToken(CParser.Minus, i);
		}
		public AdditiveExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_additiveExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.EnterAdditiveExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.ExitAdditiveExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdditiveExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AdditiveExpressionContext additiveExpression() {
		AdditiveExpressionContext _localctx = new AdditiveExpressionContext(Context, State);
		EnterRule(_localctx, 20, RULE_additiveExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 314;
			multiplicativeExpression();
			State = 319;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Plus || _la==Minus) {
				{
				{
				State = 315;
				_la = TokenStream.LA(1);
				if ( !(_la==Plus || _la==Minus) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 316;
				multiplicativeExpression();
				}
				}
				State = 321;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShiftExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AdditiveExpressionContext[] additiveExpression() {
			return GetRuleContexts<AdditiveExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AdditiveExpressionContext additiveExpression(int i) {
			return GetRuleContext<AdditiveExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LeftShift() { return GetTokens(CParser.LeftShift); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftShift(int i) {
			return GetToken(CParser.LeftShift, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RightShift() { return GetTokens(CParser.RightShift); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightShift(int i) {
			return GetToken(CParser.RightShift, i);
		}
		public ShiftExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shiftExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.EnterShiftExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.ExitShiftExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShiftExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ShiftExpressionContext shiftExpression() {
		ShiftExpressionContext _localctx = new ShiftExpressionContext(Context, State);
		EnterRule(_localctx, 22, RULE_shiftExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 322;
			additiveExpression();
			State = 327;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==LeftShift || _la==RightShift) {
				{
				{
				State = 323;
				_la = TokenStream.LA(1);
				if ( !(_la==LeftShift || _la==RightShift) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 324;
				additiveExpression();
				}
				}
				State = 329;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RelationalExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ShiftExpressionContext[] shiftExpression() {
			return GetRuleContexts<ShiftExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShiftExpressionContext shiftExpression(int i) {
			return GetRuleContext<ShiftExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Less() { return GetTokens(CParser.Less); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Less(int i) {
			return GetToken(CParser.Less, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Greater() { return GetTokens(CParser.Greater); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Greater(int i) {
			return GetToken(CParser.Greater, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LessEqual() { return GetTokens(CParser.LessEqual); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LessEqual(int i) {
			return GetToken(CParser.LessEqual, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] GreaterEqual() { return GetTokens(CParser.GreaterEqual); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GreaterEqual(int i) {
			return GetToken(CParser.GreaterEqual, i);
		}
		public RelationalExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relationalExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.EnterRelationalExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.ExitRelationalExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelationalExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RelationalExpressionContext relationalExpression() {
		RelationalExpressionContext _localctx = new RelationalExpressionContext(Context, State);
		EnterRule(_localctx, 24, RULE_relationalExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 330;
			shiftExpression();
			State = 335;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & 15L) != 0)) {
				{
				{
				State = 331;
				_la = TokenStream.LA(1);
				if ( !(((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & 15L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 332;
				shiftExpression();
				}
				}
				State = 337;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EqualityExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RelationalExpressionContext[] relationalExpression() {
			return GetRuleContexts<RelationalExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RelationalExpressionContext relationalExpression(int i) {
			return GetRuleContext<RelationalExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Equal() { return GetTokens(CParser.Equal); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equal(int i) {
			return GetToken(CParser.Equal, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NotEqual() { return GetTokens(CParser.NotEqual); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NotEqual(int i) {
			return GetToken(CParser.NotEqual, i);
		}
		public EqualityExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_equalityExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.EnterEqualityExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.ExitEqualityExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEqualityExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EqualityExpressionContext equalityExpression() {
		EqualityExpressionContext _localctx = new EqualityExpressionContext(Context, State);
		EnterRule(_localctx, 26, RULE_equalityExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 338;
			relationalExpression();
			State = 343;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Equal || _la==NotEqual) {
				{
				{
				State = 339;
				_la = TokenStream.LA(1);
				if ( !(_la==Equal || _la==NotEqual) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 340;
				relationalExpression();
				}
				}
				State = 345;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AndExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EqualityExpressionContext[] equalityExpression() {
			return GetRuleContexts<EqualityExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EqualityExpressionContext equalityExpression(int i) {
			return GetRuleContext<EqualityExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] And() { return GetTokens(CParser.And); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode And(int i) {
			return GetToken(CParser.And, i);
		}
		public AndExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_andExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.EnterAndExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.ExitAndExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAndExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AndExpressionContext andExpression() {
		AndExpressionContext _localctx = new AndExpressionContext(Context, State);
		EnterRule(_localctx, 28, RULE_andExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 346;
			equalityExpression();
			State = 351;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==And) {
				{
				{
				State = 347;
				Match(And);
				State = 348;
				equalityExpression();
				}
				}
				State = 353;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExclusiveOrExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AndExpressionContext[] andExpression() {
			return GetRuleContexts<AndExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AndExpressionContext andExpression(int i) {
			return GetRuleContext<AndExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Caret() { return GetTokens(CParser.Caret); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Caret(int i) {
			return GetToken(CParser.Caret, i);
		}
		public ExclusiveOrExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exclusiveOrExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.EnterExclusiveOrExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.ExitExclusiveOrExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExclusiveOrExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExclusiveOrExpressionContext exclusiveOrExpression() {
		ExclusiveOrExpressionContext _localctx = new ExclusiveOrExpressionContext(Context, State);
		EnterRule(_localctx, 30, RULE_exclusiveOrExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 354;
			andExpression();
			State = 359;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Caret) {
				{
				{
				State = 355;
				Match(Caret);
				State = 356;
				andExpression();
				}
				}
				State = 361;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InclusiveOrExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExclusiveOrExpressionContext[] exclusiveOrExpression() {
			return GetRuleContexts<ExclusiveOrExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExclusiveOrExpressionContext exclusiveOrExpression(int i) {
			return GetRuleContext<ExclusiveOrExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Or() { return GetTokens(CParser.Or); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Or(int i) {
			return GetToken(CParser.Or, i);
		}
		public InclusiveOrExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inclusiveOrExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.EnterInclusiveOrExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.ExitInclusiveOrExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInclusiveOrExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InclusiveOrExpressionContext inclusiveOrExpression() {
		InclusiveOrExpressionContext _localctx = new InclusiveOrExpressionContext(Context, State);
		EnterRule(_localctx, 32, RULE_inclusiveOrExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 362;
			exclusiveOrExpression();
			State = 367;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Or) {
				{
				{
				State = 363;
				Match(Or);
				State = 364;
				exclusiveOrExpression();
				}
				}
				State = 369;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LogicalAndExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public InclusiveOrExpressionContext[] inclusiveOrExpression() {
			return GetRuleContexts<InclusiveOrExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InclusiveOrExpressionContext inclusiveOrExpression(int i) {
			return GetRuleContext<InclusiveOrExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] AndAnd() { return GetTokens(CParser.AndAnd); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AndAnd(int i) {
			return GetToken(CParser.AndAnd, i);
		}
		public LogicalAndExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logicalAndExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.EnterLogicalAndExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.ExitLogicalAndExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicalAndExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LogicalAndExpressionContext logicalAndExpression() {
		LogicalAndExpressionContext _localctx = new LogicalAndExpressionContext(Context, State);
		EnterRule(_localctx, 34, RULE_logicalAndExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 370;
			inclusiveOrExpression();
			State = 375;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==AndAnd) {
				{
				{
				State = 371;
				Match(AndAnd);
				State = 372;
				inclusiveOrExpression();
				}
				}
				State = 377;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LogicalOrExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LogicalAndExpressionContext[] logicalAndExpression() {
			return GetRuleContexts<LogicalAndExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LogicalAndExpressionContext logicalAndExpression(int i) {
			return GetRuleContext<LogicalAndExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OrOr() { return GetTokens(CParser.OrOr); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OrOr(int i) {
			return GetToken(CParser.OrOr, i);
		}
		public LogicalOrExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logicalOrExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.EnterLogicalOrExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.ExitLogicalOrExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicalOrExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LogicalOrExpressionContext logicalOrExpression() {
		LogicalOrExpressionContext _localctx = new LogicalOrExpressionContext(Context, State);
		EnterRule(_localctx, 36, RULE_logicalOrExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 378;
			logicalAndExpression();
			State = 383;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==OrOr) {
				{
				{
				State = 379;
				Match(OrOr);
				State = 380;
				logicalAndExpression();
				}
				}
				State = 385;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionalExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LogicalOrExpressionContext logicalOrExpression() {
			return GetRuleContext<LogicalOrExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Question() { return GetToken(CParser.Question, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(CParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConditionalExpressionContext conditionalExpression() {
			return GetRuleContext<ConditionalExpressionContext>(0);
		}
		public ConditionalExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditionalExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.EnterConditionalExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.ExitConditionalExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConditionalExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionalExpressionContext conditionalExpression() {
		ConditionalExpressionContext _localctx = new ConditionalExpressionContext(Context, State);
		EnterRule(_localctx, 38, RULE_conditionalExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 386;
			logicalOrExpression();
			State = 392;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Question) {
				{
				State = 387;
				Match(Question);
				State = 388;
				expression();
				State = 389;
				Match(Colon);
				State = 390;
				conditionalExpression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConditionalExpressionContext conditionalExpression() {
			return GetRuleContext<ConditionalExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnaryExpressionContext unaryExpression() {
			return GetRuleContext<UnaryExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentOperatorContext assignmentOperator() {
			return GetRuleContext<AssignmentOperatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentExpressionContext assignmentExpression() {
			return GetRuleContext<AssignmentExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DigitSequence() { return GetToken(CParser.DigitSequence, 0); }
		public AssignmentExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignmentExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.EnterAssignmentExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.ExitAssignmentExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignmentExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentExpressionContext assignmentExpression() {
		AssignmentExpressionContext _localctx = new AssignmentExpressionContext(Context, State);
		EnterRule(_localctx, 40, RULE_assignmentExpression);
		try {
			State = 400;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,27,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 394;
				conditionalExpression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 395;
				unaryExpression();
				State = 396;
				assignmentOperator();
				State = 397;
				assignmentExpression();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 399;
				Match(DigitSequence);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentOperatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Assign() { return GetToken(CParser.Assign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StarAssign() { return GetToken(CParser.StarAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DivAssign() { return GetToken(CParser.DivAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ModAssign() { return GetToken(CParser.ModAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PlusAssign() { return GetToken(CParser.PlusAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MinusAssign() { return GetToken(CParser.MinusAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftShiftAssign() { return GetToken(CParser.LeftShiftAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightShiftAssign() { return GetToken(CParser.RightShiftAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AndAssign() { return GetToken(CParser.AndAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XorAssign() { return GetToken(CParser.XorAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OrAssign() { return GetToken(CParser.OrAssign, 0); }
		public AssignmentOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignmentOperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.EnterAssignmentOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.ExitAssignmentOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignmentOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentOperatorContext assignmentOperator() {
		AssignmentOperatorContext _localctx = new AssignmentOperatorContext(Context, State);
		EnterRule(_localctx, 42, RULE_assignmentOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 402;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 94)) & ~0x3f) == 0 && ((1L << (_la - 94)) & 2047L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentExpressionContext[] assignmentExpression() {
			return GetRuleContexts<AssignmentExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentExpressionContext assignmentExpression(int i) {
			return GetRuleContext<AssignmentExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(CParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(CParser.Comma, i);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 44, RULE_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 404;
			assignmentExpression();
			State = 409;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 405;
				Match(Comma);
				State = 406;
				assignmentExpression();
				}
				}
				State = 411;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConditionalExpressionContext conditionalExpression() {
			return GetRuleContext<ConditionalExpressionContext>(0);
		}
		public ConstantExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constantExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.EnterConstantExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.ExitConstantExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstantExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstantExpressionContext constantExpression() {
		ConstantExpressionContext _localctx = new ConstantExpressionContext(Context, State);
		EnterRule(_localctx, 46, RULE_constantExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 412;
			conditionalExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationSpecifiersContext declarationSpecifiers() {
			return GetRuleContext<DeclarationSpecifiersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semi() { return GetToken(CParser.Semi, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InitDeclaratorListContext initDeclaratorList() {
			return GetRuleContext<InitDeclaratorListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StaticAssertDeclarationContext staticAssertDeclaration() {
			return GetRuleContext<StaticAssertDeclarationContext>(0);
		}
		public DeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.EnterDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.ExitDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationContext declaration() {
		DeclarationContext _localctx = new DeclarationContext(Context, State);
		EnterRule(_localctx, 48, RULE_declaration);
		int _la;
		try {
			State = 421;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__0:
			case T__3:
			case T__4:
			case T__5:
			case T__6:
			case T__7:
			case T__8:
			case T__9:
			case T__16:
			case Auto:
			case Char:
			case Const:
			case Double:
			case Enum:
			case Extern:
			case Float:
			case Inline:
			case Int:
			case Long:
			case Register:
			case Restrict:
			case Short:
			case Signed:
			case Static:
			case Struct:
			case Typedef:
			case Union:
			case Unsigned:
			case Void:
			case Volatile:
			case Alignas:
			case Atomic:
			case Bool:
			case Complex:
			case Noreturn:
			case ThreadLocal:
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 414;
				declarationSpecifiers();
				State = 416;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 64000L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 70368752631809L) != 0)) {
					{
					State = 415;
					initDeclaratorList();
					}
				}

				State = 418;
				Match(Semi);
				}
				break;
			case StaticAssert:
				EnterOuterAlt(_localctx, 2);
				{
				State = 420;
				staticAssertDeclaration();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationSpecifiersContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationSpecifierContext[] declarationSpecifier() {
			return GetRuleContexts<DeclarationSpecifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationSpecifierContext declarationSpecifier(int i) {
			return GetRuleContext<DeclarationSpecifierContext>(i);
		}
		public DeclarationSpecifiersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declarationSpecifiers; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.EnterDeclarationSpecifiers(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.ExitDeclarationSpecifiers(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclarationSpecifiers(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationSpecifiersContext declarationSpecifiers() {
		DeclarationSpecifiersContext _localctx = new DeclarationSpecifiersContext(Context, State);
		EnterRule(_localctx, 50, RULE_declarationSpecifiers);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 424;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 423;
					declarationSpecifier();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 426;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,31,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationSpecifiers2Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationSpecifierContext[] declarationSpecifier() {
			return GetRuleContexts<DeclarationSpecifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationSpecifierContext declarationSpecifier(int i) {
			return GetRuleContext<DeclarationSpecifierContext>(i);
		}
		public DeclarationSpecifiers2Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declarationSpecifiers2; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.EnterDeclarationSpecifiers2(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.ExitDeclarationSpecifiers2(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclarationSpecifiers2(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationSpecifiers2Context declarationSpecifiers2() {
		DeclarationSpecifiers2Context _localctx = new DeclarationSpecifiers2Context(Context, State);
		EnterRule(_localctx, 52, RULE_declarationSpecifiers2);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 429;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 428;
				declarationSpecifier();
				}
				}
				State = 431;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & -6386264861217519630L) != 0) || _la==Identifier );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationSpecifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StorageClassSpecifierContext storageClassSpecifier() {
			return GetRuleContext<StorageClassSpecifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeSpecifierContext typeSpecifier() {
			return GetRuleContext<TypeSpecifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeQualifierContext typeQualifier() {
			return GetRuleContext<TypeQualifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionSpecifierContext functionSpecifier() {
			return GetRuleContext<FunctionSpecifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlignmentSpecifierContext alignmentSpecifier() {
			return GetRuleContext<AlignmentSpecifierContext>(0);
		}
		public DeclarationSpecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declarationSpecifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.EnterDeclarationSpecifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.ExitDeclarationSpecifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclarationSpecifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationSpecifierContext declarationSpecifier() {
		DeclarationSpecifierContext _localctx = new DeclarationSpecifierContext(Context, State);
		EnterRule(_localctx, 54, RULE_declarationSpecifier);
		try {
			State = 438;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,33,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 433;
				storageClassSpecifier();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 434;
				typeSpecifier();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 435;
				typeQualifier();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 436;
				functionSpecifier();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 437;
				alignmentSpecifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InitDeclaratorListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public InitDeclaratorContext[] initDeclarator() {
			return GetRuleContexts<InitDeclaratorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InitDeclaratorContext initDeclarator(int i) {
			return GetRuleContext<InitDeclaratorContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(CParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(CParser.Comma, i);
		}
		public InitDeclaratorListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_initDeclaratorList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.EnterInitDeclaratorList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.ExitInitDeclaratorList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInitDeclaratorList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InitDeclaratorListContext initDeclaratorList() {
		InitDeclaratorListContext _localctx = new InitDeclaratorListContext(Context, State);
		EnterRule(_localctx, 56, RULE_initDeclaratorList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 440;
			initDeclarator();
			State = 445;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 441;
				Match(Comma);
				State = 442;
				initDeclarator();
				}
				}
				State = 447;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InitDeclaratorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DeclaratorContext declarator() {
			return GetRuleContext<DeclaratorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Assign() { return GetToken(CParser.Assign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InitializerContext initializer() {
			return GetRuleContext<InitializerContext>(0);
		}
		public InitDeclaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_initDeclarator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.EnterInitDeclarator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.ExitInitDeclarator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInitDeclarator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InitDeclaratorContext initDeclarator() {
		InitDeclaratorContext _localctx = new InitDeclaratorContext(Context, State);
		EnterRule(_localctx, 58, RULE_initDeclarator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 448;
			declarator();
			State = 451;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Assign) {
				{
				State = 449;
				Match(Assign);
				State = 450;
				initializer();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StorageClassSpecifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Typedef() { return GetToken(CParser.Typedef, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Extern() { return GetToken(CParser.Extern, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Static() { return GetToken(CParser.Static, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ThreadLocal() { return GetToken(CParser.ThreadLocal, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Auto() { return GetToken(CParser.Auto, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Register() { return GetToken(CParser.Register, 0); }
		public StorageClassSpecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_storageClassSpecifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.EnterStorageClassSpecifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.ExitStorageClassSpecifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStorageClassSpecifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StorageClassSpecifierContext storageClassSpecifier() {
		StorageClassSpecifierContext _localctx = new StorageClassSpecifierContext(Context, State);
		EnterRule(_localctx, 60, RULE_storageClassSpecifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 453;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & -9223054825601630208L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeSpecifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Void() { return GetToken(CParser.Void, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Char() { return GetToken(CParser.Char, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Short() { return GetToken(CParser.Short, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Int() { return GetToken(CParser.Int, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Long() { return GetToken(CParser.Long, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Float() { return GetToken(CParser.Float, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Double() { return GetToken(CParser.Double, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Signed() { return GetToken(CParser.Signed, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Unsigned() { return GetToken(CParser.Unsigned, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Bool() { return GetToken(CParser.Bool, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Complex() { return GetToken(CParser.Complex, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParen() { return GetToken(CParser.LeftParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParen() { return GetToken(CParser.RightParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AtomicTypeSpecifierContext atomicTypeSpecifier() {
			return GetRuleContext<AtomicTypeSpecifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructOrUnionSpecifierContext structOrUnionSpecifier() {
			return GetRuleContext<StructOrUnionSpecifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumSpecifierContext enumSpecifier() {
			return GetRuleContext<EnumSpecifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypedefNameContext typedefName() {
			return GetRuleContext<TypedefNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstantExpressionContext constantExpression() {
			return GetRuleContext<ConstantExpressionContext>(0);
		}
		public TypeSpecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeSpecifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.EnterTypeSpecifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.ExitTypeSpecifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeSpecifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeSpecifierContext typeSpecifier() {
		TypeSpecifierContext _localctx = new TypeSpecifierContext(Context, State);
		EnterRule(_localctx, 62, RULE_typeSpecifier);
		int _la;
		try {
			State = 482;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Void:
				EnterOuterAlt(_localctx, 1);
				{
				State = 455;
				Match(Void);
				}
				break;
			case Char:
				EnterOuterAlt(_localctx, 2);
				{
				State = 456;
				Match(Char);
				}
				break;
			case Short:
				EnterOuterAlt(_localctx, 3);
				{
				State = 457;
				Match(Short);
				}
				break;
			case Int:
				EnterOuterAlt(_localctx, 4);
				{
				State = 458;
				Match(Int);
				}
				break;
			case Long:
				EnterOuterAlt(_localctx, 5);
				{
				State = 459;
				Match(Long);
				}
				break;
			case Float:
				EnterOuterAlt(_localctx, 6);
				{
				State = 460;
				Match(Float);
				}
				break;
			case Double:
				EnterOuterAlt(_localctx, 7);
				{
				State = 461;
				Match(Double);
				}
				break;
			case Signed:
				EnterOuterAlt(_localctx, 8);
				{
				State = 462;
				Match(Signed);
				}
				break;
			case Unsigned:
				EnterOuterAlt(_localctx, 9);
				{
				State = 463;
				Match(Unsigned);
				}
				break;
			case Bool:
				EnterOuterAlt(_localctx, 10);
				{
				State = 464;
				Match(Bool);
				}
				break;
			case Complex:
				EnterOuterAlt(_localctx, 11);
				{
				State = 465;
				Match(Complex);
				}
				break;
			case T__3:
				EnterOuterAlt(_localctx, 12);
				{
				State = 466;
				Match(T__3);
				}
				break;
			case T__4:
				EnterOuterAlt(_localctx, 13);
				{
				State = 467;
				Match(T__4);
				}
				break;
			case T__5:
				EnterOuterAlt(_localctx, 14);
				{
				State = 468;
				Match(T__5);
				}
				break;
			case T__0:
				EnterOuterAlt(_localctx, 15);
				{
				State = 469;
				Match(T__0);
				State = 470;
				Match(LeftParen);
				State = 471;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 112L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 472;
				Match(RightParen);
				}
				break;
			case Atomic:
				EnterOuterAlt(_localctx, 16);
				{
				State = 473;
				atomicTypeSpecifier();
				}
				break;
			case Struct:
			case Union:
				EnterOuterAlt(_localctx, 17);
				{
				State = 474;
				structOrUnionSpecifier();
				}
				break;
			case Enum:
				EnterOuterAlt(_localctx, 18);
				{
				State = 475;
				enumSpecifier();
				}
				break;
			case Identifier:
				EnterOuterAlt(_localctx, 19);
				{
				State = 476;
				typedefName();
				}
				break;
			case T__6:
				EnterOuterAlt(_localctx, 20);
				{
				State = 477;
				Match(T__6);
				State = 478;
				Match(LeftParen);
				State = 479;
				constantExpression();
				State = 480;
				Match(RightParen);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructOrUnionSpecifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StructOrUnionContext structOrUnion() {
			return GetRuleContext<StructOrUnionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftBrace() { return GetToken(CParser.LeftBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StructDeclarationListContext structDeclarationList() {
			return GetRuleContext<StructDeclarationListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightBrace() { return GetToken(CParser.RightBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(CParser.Identifier, 0); }
		public StructOrUnionSpecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structOrUnionSpecifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.EnterStructOrUnionSpecifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.ExitStructOrUnionSpecifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructOrUnionSpecifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructOrUnionSpecifierContext structOrUnionSpecifier() {
		StructOrUnionSpecifierContext _localctx = new StructOrUnionSpecifierContext(Context, State);
		EnterRule(_localctx, 64, RULE_structOrUnionSpecifier);
		int _la;
		try {
			State = 495;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,38,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 484;
				structOrUnion();
				State = 486;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Identifier) {
					{
					State = 485;
					Match(Identifier);
					}
				}

				State = 488;
				Match(LeftBrace);
				State = 489;
				structDeclarationList();
				State = 490;
				Match(RightBrace);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 492;
				structOrUnion();
				State = 493;
				Match(Identifier);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructOrUnionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Struct() { return GetToken(CParser.Struct, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Union() { return GetToken(CParser.Union, 0); }
		public StructOrUnionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structOrUnion; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.EnterStructOrUnion(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.ExitStructOrUnion(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructOrUnion(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructOrUnionContext structOrUnion() {
		StructOrUnionContext _localctx = new StructOrUnionContext(Context, State);
		EnterRule(_localctx, 66, RULE_structOrUnion);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 497;
			_la = TokenStream.LA(1);
			if ( !(_la==Struct || _la==Union) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructDeclarationListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StructDeclarationContext[] structDeclaration() {
			return GetRuleContexts<StructDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructDeclarationContext structDeclaration(int i) {
			return GetRuleContext<StructDeclarationContext>(i);
		}
		public StructDeclarationListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structDeclarationList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.EnterStructDeclarationList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.ExitStructDeclarationList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructDeclarationList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructDeclarationListContext structDeclarationList() {
		StructDeclarationListContext _localctx = new StructDeclarationListContext(Context, State);
		EnterRule(_localctx, 68, RULE_structDeclarationList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 500;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 499;
				structDeclaration();
				}
				}
				State = 502;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 5124618506368712946L) != 0) || _la==Identifier );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SpecifierQualifierListContext specifierQualifierList() {
			return GetRuleContext<SpecifierQualifierListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructDeclaratorListContext structDeclaratorList() {
			return GetRuleContext<StructDeclaratorListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semi() { return GetToken(CParser.Semi, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StaticAssertDeclarationContext staticAssertDeclaration() {
			return GetRuleContext<StaticAssertDeclarationContext>(0);
		}
		public StructDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.EnterStructDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.ExitStructDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructDeclarationContext structDeclaration() {
		StructDeclarationContext _localctx = new StructDeclarationContext(Context, State);
		EnterRule(_localctx, 70, RULE_structDeclaration);
		try {
			State = 512;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,40,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 504;
				specifierQualifierList();
				State = 505;
				structDeclaratorList();
				State = 506;
				Match(Semi);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 508;
				specifierQualifierList();
				State = 509;
				Match(Semi);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 511;
				staticAssertDeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SpecifierQualifierListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeSpecifierContext typeSpecifier() {
			return GetRuleContext<TypeSpecifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeQualifierContext typeQualifier() {
			return GetRuleContext<TypeQualifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SpecifierQualifierListContext specifierQualifierList() {
			return GetRuleContext<SpecifierQualifierListContext>(0);
		}
		public SpecifierQualifierListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_specifierQualifierList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.EnterSpecifierQualifierList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.ExitSpecifierQualifierList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpecifierQualifierList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SpecifierQualifierListContext specifierQualifierList() {
		SpecifierQualifierListContext _localctx = new SpecifierQualifierListContext(Context, State);
		EnterRule(_localctx, 72, RULE_specifierQualifierList);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 516;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,41,Context) ) {
			case 1:
				{
				State = 514;
				typeSpecifier();
				}
				break;
			case 2:
				{
				State = 515;
				typeQualifier();
				}
				break;
			}
			State = 519;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,42,Context) ) {
			case 1:
				{
				State = 518;
				specifierQualifierList();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructDeclaratorListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StructDeclaratorContext[] structDeclarator() {
			return GetRuleContexts<StructDeclaratorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructDeclaratorContext structDeclarator(int i) {
			return GetRuleContext<StructDeclaratorContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(CParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(CParser.Comma, i);
		}
		public StructDeclaratorListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structDeclaratorList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.EnterStructDeclaratorList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.ExitStructDeclaratorList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructDeclaratorList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructDeclaratorListContext structDeclaratorList() {
		StructDeclaratorListContext _localctx = new StructDeclaratorListContext(Context, State);
		EnterRule(_localctx, 74, RULE_structDeclaratorList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 521;
			structDeclarator();
			State = 526;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 522;
				Match(Comma);
				State = 523;
				structDeclarator();
				}
				}
				State = 528;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructDeclaratorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DeclaratorContext declarator() {
			return GetRuleContext<DeclaratorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(CParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConstantExpressionContext constantExpression() {
			return GetRuleContext<ConstantExpressionContext>(0);
		}
		public StructDeclaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structDeclarator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.EnterStructDeclarator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.ExitStructDeclarator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructDeclarator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructDeclaratorContext structDeclarator() {
		StructDeclaratorContext _localctx = new StructDeclaratorContext(Context, State);
		EnterRule(_localctx, 76, RULE_structDeclarator);
		int _la;
		try {
			State = 535;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,45,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 529;
				declarator();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 531;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 64000L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 70368752631809L) != 0)) {
					{
					State = 530;
					declarator();
					}
				}

				State = 533;
				Match(Colon);
				State = 534;
				constantExpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumSpecifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Enum() { return GetToken(CParser.Enum, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftBrace() { return GetToken(CParser.LeftBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EnumeratorListContext enumeratorList() {
			return GetRuleContext<EnumeratorListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightBrace() { return GetToken(CParser.RightBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(CParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma() { return GetToken(CParser.Comma, 0); }
		public EnumSpecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumSpecifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.EnterEnumSpecifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.ExitEnumSpecifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumSpecifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumSpecifierContext enumSpecifier() {
		EnumSpecifierContext _localctx = new EnumSpecifierContext(Context, State);
		EnterRule(_localctx, 78, RULE_enumSpecifier);
		int _la;
		try {
			State = 550;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,48,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 537;
				Match(Enum);
				State = 539;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Identifier) {
					{
					State = 538;
					Match(Identifier);
					}
				}

				State = 541;
				Match(LeftBrace);
				State = 542;
				enumeratorList();
				State = 544;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Comma) {
					{
					State = 543;
					Match(Comma);
					}
				}

				State = 546;
				Match(RightBrace);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 548;
				Match(Enum);
				State = 549;
				Match(Identifier);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumeratorListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EnumeratorContext[] enumerator() {
			return GetRuleContexts<EnumeratorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumeratorContext enumerator(int i) {
			return GetRuleContext<EnumeratorContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(CParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(CParser.Comma, i);
		}
		public EnumeratorListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumeratorList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.EnterEnumeratorList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.ExitEnumeratorList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumeratorList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumeratorListContext enumeratorList() {
		EnumeratorListContext _localctx = new EnumeratorListContext(Context, State);
		EnterRule(_localctx, 80, RULE_enumeratorList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 552;
			enumerator();
			State = 557;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,49,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 553;
					Match(Comma);
					State = 554;
					enumerator();
					}
					} 
				}
				State = 559;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,49,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumeratorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EnumerationConstantContext enumerationConstant() {
			return GetRuleContext<EnumerationConstantContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Assign() { return GetToken(CParser.Assign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConstantExpressionContext constantExpression() {
			return GetRuleContext<ConstantExpressionContext>(0);
		}
		public EnumeratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumerator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.EnterEnumerator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.ExitEnumerator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumerator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumeratorContext enumerator() {
		EnumeratorContext _localctx = new EnumeratorContext(Context, State);
		EnterRule(_localctx, 82, RULE_enumerator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 560;
			enumerationConstant();
			State = 563;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Assign) {
				{
				State = 561;
				Match(Assign);
				State = 562;
				constantExpression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumerationConstantContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(CParser.Identifier, 0); }
		public EnumerationConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumerationConstant; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.EnterEnumerationConstant(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.ExitEnumerationConstant(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumerationConstant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumerationConstantContext enumerationConstant() {
		EnumerationConstantContext _localctx = new EnumerationConstantContext(Context, State);
		EnterRule(_localctx, 84, RULE_enumerationConstant);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 565;
			Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AtomicTypeSpecifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Atomic() { return GetToken(CParser.Atomic, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParen() { return GetToken(CParser.LeftParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParen() { return GetToken(CParser.RightParen, 0); }
		public AtomicTypeSpecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_atomicTypeSpecifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.EnterAtomicTypeSpecifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.ExitAtomicTypeSpecifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAtomicTypeSpecifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AtomicTypeSpecifierContext atomicTypeSpecifier() {
		AtomicTypeSpecifierContext _localctx = new AtomicTypeSpecifierContext(Context, State);
		EnterRule(_localctx, 86, RULE_atomicTypeSpecifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 567;
			Match(Atomic);
			State = 568;
			Match(LeftParen);
			State = 569;
			typeName();
			State = 570;
			Match(RightParen);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeQualifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Const() { return GetToken(CParser.Const, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Restrict() { return GetToken(CParser.Restrict, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Volatile() { return GetToken(CParser.Volatile, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Atomic() { return GetToken(CParser.Atomic, 0); }
		public TypeQualifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeQualifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.EnterTypeQualifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.ExitTypeQualifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeQualifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeQualifierContext typeQualifier() {
		TypeQualifierContext _localctx = new TypeQualifierContext(Context, State);
		EnterRule(_localctx, 88, RULE_typeQualifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 572;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 76562293193703424L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionSpecifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Inline() { return GetToken(CParser.Inline, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Noreturn() { return GetToken(CParser.Noreturn, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public GccAttributeSpecifierContext gccAttributeSpecifier() {
			return GetRuleContext<GccAttributeSpecifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParen() { return GetToken(CParser.LeftParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(CParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParen() { return GetToken(CParser.RightParen, 0); }
		public FunctionSpecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionSpecifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.EnterFunctionSpecifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.ExitFunctionSpecifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionSpecifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionSpecifierContext functionSpecifier() {
		FunctionSpecifierContext _localctx = new FunctionSpecifierContext(Context, State);
		EnterRule(_localctx, 90, RULE_functionSpecifier);
		try {
			State = 583;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Inline:
				EnterOuterAlt(_localctx, 1);
				{
				State = 574;
				Match(Inline);
				}
				break;
			case Noreturn:
				EnterOuterAlt(_localctx, 2);
				{
				State = 575;
				Match(Noreturn);
				}
				break;
			case T__7:
				EnterOuterAlt(_localctx, 3);
				{
				State = 576;
				Match(T__7);
				}
				break;
			case T__8:
				EnterOuterAlt(_localctx, 4);
				{
				State = 577;
				Match(T__8);
				}
				break;
			case T__16:
				EnterOuterAlt(_localctx, 5);
				{
				State = 578;
				gccAttributeSpecifier();
				}
				break;
			case T__9:
				EnterOuterAlt(_localctx, 6);
				{
				State = 579;
				Match(T__9);
				State = 580;
				Match(LeftParen);
				State = 581;
				Match(Identifier);
				State = 582;
				Match(RightParen);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlignmentSpecifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Alignas() { return GetToken(CParser.Alignas, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParen() { return GetToken(CParser.LeftParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParen() { return GetToken(CParser.RightParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstantExpressionContext constantExpression() {
			return GetRuleContext<ConstantExpressionContext>(0);
		}
		public AlignmentSpecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alignmentSpecifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.EnterAlignmentSpecifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.ExitAlignmentSpecifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlignmentSpecifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AlignmentSpecifierContext alignmentSpecifier() {
		AlignmentSpecifierContext _localctx = new AlignmentSpecifierContext(Context, State);
		EnterRule(_localctx, 92, RULE_alignmentSpecifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 585;
			Match(Alignas);
			State = 586;
			Match(LeftParen);
			State = 589;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,52,Context) ) {
			case 1:
				{
				State = 587;
				typeName();
				}
				break;
			case 2:
				{
				State = 588;
				constantExpression();
				}
				break;
			}
			State = 591;
			Match(RightParen);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclaratorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DirectDeclaratorContext directDeclarator() {
			return GetRuleContext<DirectDeclaratorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PointerContext pointer() {
			return GetRuleContext<PointerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GccDeclaratorExtensionContext[] gccDeclaratorExtension() {
			return GetRuleContexts<GccDeclaratorExtensionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public GccDeclaratorExtensionContext gccDeclaratorExtension(int i) {
			return GetRuleContext<GccDeclaratorExtensionContext>(i);
		}
		public DeclaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declarator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.EnterDeclarator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.ExitDeclarator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclarator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclaratorContext declarator() {
		DeclaratorContext _localctx = new DeclaratorContext(Context, State);
		EnterRule(_localctx, 94, RULE_declarator);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 594;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Star || _la==Caret) {
				{
				State = 593;
				pointer();
				}
			}

			State = 596;
			directDeclarator(0);
			State = 600;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,54,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 597;
					gccDeclaratorExtension();
					}
					} 
				}
				State = 602;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,54,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DirectDeclaratorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(CParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParen() { return GetToken(CParser.LeftParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DeclaratorContext declarator() {
			return GetRuleContext<DeclaratorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParen() { return GetToken(CParser.RightParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(CParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DigitSequence() { return GetToken(CParser.DigitSequence, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VcSpecificModiferContext vcSpecificModifer() {
			return GetRuleContext<VcSpecificModiferContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DirectDeclaratorContext directDeclarator() {
			return GetRuleContext<DirectDeclaratorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftBracket() { return GetToken(CParser.LeftBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightBracket() { return GetToken(CParser.RightBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeQualifierListContext typeQualifierList() {
			return GetRuleContext<TypeQualifierListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentExpressionContext assignmentExpression() {
			return GetRuleContext<AssignmentExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Static() { return GetToken(CParser.Static, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Star() { return GetToken(CParser.Star, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParameterTypeListContext parameterTypeList() {
			return GetRuleContext<ParameterTypeListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierListContext identifierList() {
			return GetRuleContext<IdentifierListContext>(0);
		}
		public DirectDeclaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_directDeclarator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.EnterDirectDeclarator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.ExitDirectDeclarator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDirectDeclarator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DirectDeclaratorContext directDeclarator() {
		return directDeclarator(0);
	}

	private DirectDeclaratorContext directDeclarator(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		DirectDeclaratorContext _localctx = new DirectDeclaratorContext(Context, _parentState);
		DirectDeclaratorContext _prevctx = _localctx;
		int _startState = 96;
		EnterRecursionRule(_localctx, 96, RULE_directDeclarator, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 620;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,55,Context) ) {
			case 1:
				{
				State = 604;
				Match(Identifier);
				}
				break;
			case 2:
				{
				State = 605;
				Match(LeftParen);
				State = 606;
				declarator();
				State = 607;
				Match(RightParen);
				}
				break;
			case 3:
				{
				State = 609;
				Match(Identifier);
				State = 610;
				Match(Colon);
				State = 611;
				Match(DigitSequence);
				}
				break;
			case 4:
				{
				State = 612;
				vcSpecificModifer();
				State = 613;
				Match(Identifier);
				}
				break;
			case 5:
				{
				State = 615;
				Match(LeftParen);
				State = 616;
				vcSpecificModifer();
				State = 617;
				declarator();
				State = 618;
				Match(RightParen);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 667;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,62,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 665;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,61,Context) ) {
					case 1:
						{
						_localctx = new DirectDeclaratorContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_directDeclarator);
						State = 622;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 623;
						Match(LeftBracket);
						State = 625;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 76562293193703424L) != 0)) {
							{
							State = 624;
							typeQualifierList();
							}
						}

						State = 628;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 612507141508431886L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 1055531215745025L) != 0)) {
							{
							State = 627;
							assignmentExpression();
							}
						}

						State = 630;
						Match(RightBracket);
						}
						break;
					case 2:
						{
						_localctx = new DirectDeclaratorContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_directDeclarator);
						State = 631;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 632;
						Match(LeftBracket);
						State = 633;
						Match(Static);
						State = 635;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 76562293193703424L) != 0)) {
							{
							State = 634;
							typeQualifierList();
							}
						}

						State = 637;
						assignmentExpression();
						State = 638;
						Match(RightBracket);
						}
						break;
					case 3:
						{
						_localctx = new DirectDeclaratorContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_directDeclarator);
						State = 640;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 641;
						Match(LeftBracket);
						State = 642;
						typeQualifierList();
						State = 643;
						Match(Static);
						State = 644;
						assignmentExpression();
						State = 645;
						Match(RightBracket);
						}
						break;
					case 4:
						{
						_localctx = new DirectDeclaratorContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_directDeclarator);
						State = 647;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 648;
						Match(LeftBracket);
						State = 650;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 76562293193703424L) != 0)) {
							{
							State = 649;
							typeQualifierList();
							}
						}

						State = 652;
						Match(Star);
						State = 653;
						Match(RightBracket);
						}
						break;
					case 5:
						{
						_localctx = new DirectDeclaratorContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_directDeclarator);
						State = 654;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 655;
						Match(LeftParen);
						State = 656;
						parameterTypeList();
						State = 657;
						Match(RightParen);
						}
						break;
					case 6:
						{
						_localctx = new DirectDeclaratorContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_directDeclarator);
						State = 659;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 660;
						Match(LeftParen);
						State = 662;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==Identifier) {
							{
							State = 661;
							identifierList();
							}
						}

						State = 664;
						Match(RightParen);
						}
						break;
					}
					} 
				}
				State = 669;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,62,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class VcSpecificModiferContext : ParserRuleContext {
		public VcSpecificModiferContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_vcSpecificModifer; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.EnterVcSpecificModifer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.ExitVcSpecificModifer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVcSpecificModifer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VcSpecificModiferContext vcSpecificModifer() {
		VcSpecificModiferContext _localctx = new VcSpecificModiferContext(Context, State);
		EnterRule(_localctx, 98, RULE_vcSpecificModifer);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 670;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 64000L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GccDeclaratorExtensionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParen() { return GetToken(CParser.LeftParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParen() { return GetToken(CParser.RightParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] StringLiteral() { return GetTokens(CParser.StringLiteral); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringLiteral(int i) {
			return GetToken(CParser.StringLiteral, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GccAttributeSpecifierContext gccAttributeSpecifier() {
			return GetRuleContext<GccAttributeSpecifierContext>(0);
		}
		public GccDeclaratorExtensionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_gccDeclaratorExtension; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.EnterGccDeclaratorExtension(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.ExitGccDeclaratorExtension(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGccDeclaratorExtension(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GccDeclaratorExtensionContext gccDeclaratorExtension() {
		GccDeclaratorExtensionContext _localctx = new GccDeclaratorExtensionContext(Context, State);
		EnterRule(_localctx, 100, RULE_gccDeclaratorExtension);
		int _la;
		try {
			State = 681;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__15:
				EnterOuterAlt(_localctx, 1);
				{
				State = 672;
				Match(T__15);
				State = 673;
				Match(LeftParen);
				State = 675;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 674;
					Match(StringLiteral);
					}
					}
					State = 677;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==StringLiteral );
				State = 679;
				Match(RightParen);
				}
				break;
			case T__16:
				EnterOuterAlt(_localctx, 2);
				{
				State = 680;
				gccAttributeSpecifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GccAttributeSpecifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LeftParen() { return GetTokens(CParser.LeftParen); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParen(int i) {
			return GetToken(CParser.LeftParen, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GccAttributeListContext gccAttributeList() {
			return GetRuleContext<GccAttributeListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RightParen() { return GetTokens(CParser.RightParen); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParen(int i) {
			return GetToken(CParser.RightParen, i);
		}
		public GccAttributeSpecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_gccAttributeSpecifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.EnterGccAttributeSpecifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.ExitGccAttributeSpecifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGccAttributeSpecifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GccAttributeSpecifierContext gccAttributeSpecifier() {
		GccAttributeSpecifierContext _localctx = new GccAttributeSpecifierContext(Context, State);
		EnterRule(_localctx, 102, RULE_gccAttributeSpecifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 683;
			Match(T__16);
			State = 684;
			Match(LeftParen);
			State = 685;
			Match(LeftParen);
			State = 686;
			gccAttributeList();
			State = 687;
			Match(RightParen);
			State = 688;
			Match(RightParen);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GccAttributeListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public GccAttributeContext[] gccAttribute() {
			return GetRuleContexts<GccAttributeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public GccAttributeContext gccAttribute(int i) {
			return GetRuleContext<GccAttributeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(CParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(CParser.Comma, i);
		}
		public GccAttributeListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_gccAttributeList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.EnterGccAttributeList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.ExitGccAttributeList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGccAttributeList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GccAttributeListContext gccAttributeList() {
		GccAttributeListContext _localctx = new GccAttributeListContext(Context, State);
		EnterRule(_localctx, 104, RULE_gccAttributeList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 691;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -2L) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & 36028796884746239L) != 0)) {
				{
				State = 690;
				gccAttribute();
				}
			}

			State = 699;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 693;
				Match(Comma);
				State = 695;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -2L) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & 36028796884746239L) != 0)) {
					{
					State = 694;
					gccAttribute();
					}
				}

				}
				}
				State = 701;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GccAttributeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma() { return GetToken(CParser.Comma, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LeftParen() { return GetTokens(CParser.LeftParen); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParen(int i) {
			return GetToken(CParser.LeftParen, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RightParen() { return GetTokens(CParser.RightParen); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParen(int i) {
			return GetToken(CParser.RightParen, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentExpressionListContext argumentExpressionList() {
			return GetRuleContext<ArgumentExpressionListContext>(0);
		}
		public GccAttributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_gccAttribute; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.EnterGccAttribute(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.ExitGccAttribute(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGccAttribute(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GccAttributeContext gccAttribute() {
		GccAttributeContext _localctx = new GccAttributeContext(Context, State);
		EnterRule(_localctx, 106, RULE_gccAttribute);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 702;
			_la = TokenStream.LA(1);
			if ( _la <= 0 || (((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 536870915L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 708;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LeftParen) {
				{
				State = 703;
				Match(LeftParen);
				State = 705;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 612507141508431886L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 1055531215745025L) != 0)) {
					{
					State = 704;
					argumentExpressionList();
					}
				}

				State = 707;
				Match(RightParen);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PointerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Star() { return GetTokens(CParser.Star); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Star(int i) {
			return GetToken(CParser.Star, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Caret() { return GetTokens(CParser.Caret); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Caret(int i) {
			return GetToken(CParser.Caret, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeQualifierListContext[] typeQualifierList() {
			return GetRuleContexts<TypeQualifierListContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeQualifierListContext typeQualifierList(int i) {
			return GetRuleContext<TypeQualifierListContext>(i);
		}
		public PointerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pointer; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.EnterPointer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.ExitPointer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPointer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PointerContext pointer() {
		PointerContext _localctx = new PointerContext(Context, State);
		EnterRule(_localctx, 108, RULE_pointer);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 714;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 710;
				_la = TokenStream.LA(1);
				if ( !(_la==Star || _la==Caret) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 712;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 76562293193703424L) != 0)) {
					{
					State = 711;
					typeQualifierList();
					}
				}

				}
				}
				State = 716;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==Star || _la==Caret );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeQualifierListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeQualifierContext[] typeQualifier() {
			return GetRuleContexts<TypeQualifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeQualifierContext typeQualifier(int i) {
			return GetRuleContext<TypeQualifierContext>(i);
		}
		public TypeQualifierListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeQualifierList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.EnterTypeQualifierList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.ExitTypeQualifierList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeQualifierList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeQualifierListContext typeQualifierList() {
		TypeQualifierListContext _localctx = new TypeQualifierListContext(Context, State);
		EnterRule(_localctx, 110, RULE_typeQualifierList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 719;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 718;
				typeQualifier();
				}
				}
				State = 721;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 76562293193703424L) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterTypeListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma() { return GetToken(CParser.Comma, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Ellipsis() { return GetToken(CParser.Ellipsis, 0); }
		public ParameterTypeListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterTypeList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.EnterParameterTypeList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.ExitParameterTypeList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameterTypeList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterTypeListContext parameterTypeList() {
		ParameterTypeListContext _localctx = new ParameterTypeListContext(Context, State);
		EnterRule(_localctx, 112, RULE_parameterTypeList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 723;
			parameterList();
			State = 726;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Comma) {
				{
				State = 724;
				Match(Comma);
				State = 725;
				Match(Ellipsis);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ParameterDeclarationContext[] parameterDeclaration() {
			return GetRuleContexts<ParameterDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterDeclarationContext parameterDeclaration(int i) {
			return GetRuleContext<ParameterDeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(CParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(CParser.Comma, i);
		}
		public ParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.EnterParameterList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.ExitParameterList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameterList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterListContext parameterList() {
		ParameterListContext _localctx = new ParameterListContext(Context, State);
		EnterRule(_localctx, 114, RULE_parameterList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 728;
			parameterDeclaration();
			State = 733;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,74,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 729;
					Match(Comma);
					State = 730;
					parameterDeclaration();
					}
					} 
				}
				State = 735;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,74,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationSpecifiersContext declarationSpecifiers() {
			return GetRuleContext<DeclarationSpecifiersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclaratorContext declarator() {
			return GetRuleContext<DeclaratorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationSpecifiers2Context declarationSpecifiers2() {
			return GetRuleContext<DeclarationSpecifiers2Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AbstractDeclaratorContext abstractDeclarator() {
			return GetRuleContext<AbstractDeclaratorContext>(0);
		}
		public ParameterDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.EnterParameterDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.ExitParameterDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameterDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterDeclarationContext parameterDeclaration() {
		ParameterDeclarationContext _localctx = new ParameterDeclarationContext(Context, State);
		EnterRule(_localctx, 116, RULE_parameterDeclaration);
		int _la;
		try {
			State = 743;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,76,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 736;
				declarationSpecifiers();
				State = 737;
				declarator();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 739;
				declarationSpecifiers2();
				State = 741;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 8454149L) != 0)) {
					{
					State = 740;
					abstractDeclarator();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Identifier() { return GetTokens(CParser.Identifier); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier(int i) {
			return GetToken(CParser.Identifier, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(CParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(CParser.Comma, i);
		}
		public IdentifierListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifierList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.EnterIdentifierList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.ExitIdentifierList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifierList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierListContext identifierList() {
		IdentifierListContext _localctx = new IdentifierListContext(Context, State);
		EnterRule(_localctx, 118, RULE_identifierList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 745;
			Match(Identifier);
			State = 750;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 746;
				Match(Comma);
				State = 747;
				Match(Identifier);
				}
				}
				State = 752;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SpecifierQualifierListContext specifierQualifierList() {
			return GetRuleContext<SpecifierQualifierListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AbstractDeclaratorContext abstractDeclarator() {
			return GetRuleContext<AbstractDeclaratorContext>(0);
		}
		public TypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.EnterTypeName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.ExitTypeName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeNameContext typeName() {
		TypeNameContext _localctx = new TypeNameContext(Context, State);
		EnterRule(_localctx, 120, RULE_typeName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 753;
			specifierQualifierList();
			State = 755;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 8454149L) != 0)) {
				{
				State = 754;
				abstractDeclarator();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AbstractDeclaratorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PointerContext pointer() {
			return GetRuleContext<PointerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DirectAbstractDeclaratorContext directAbstractDeclarator() {
			return GetRuleContext<DirectAbstractDeclaratorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GccDeclaratorExtensionContext[] gccDeclaratorExtension() {
			return GetRuleContexts<GccDeclaratorExtensionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public GccDeclaratorExtensionContext gccDeclaratorExtension(int i) {
			return GetRuleContext<GccDeclaratorExtensionContext>(i);
		}
		public AbstractDeclaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_abstractDeclarator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.EnterAbstractDeclarator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.ExitAbstractDeclarator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAbstractDeclarator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AbstractDeclaratorContext abstractDeclarator() {
		AbstractDeclaratorContext _localctx = new AbstractDeclaratorContext(Context, State);
		EnterRule(_localctx, 122, RULE_abstractDeclarator);
		int _la;
		try {
			State = 768;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,81,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 757;
				pointer();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 759;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Star || _la==Caret) {
					{
					State = 758;
					pointer();
					}
				}

				State = 761;
				directAbstractDeclarator(0);
				State = 765;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__15 || _la==T__16) {
					{
					{
					State = 762;
					gccDeclaratorExtension();
					}
					}
					State = 767;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DirectAbstractDeclaratorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParen() { return GetToken(CParser.LeftParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AbstractDeclaratorContext abstractDeclarator() {
			return GetRuleContext<AbstractDeclaratorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParen() { return GetToken(CParser.RightParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public GccDeclaratorExtensionContext[] gccDeclaratorExtension() {
			return GetRuleContexts<GccDeclaratorExtensionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public GccDeclaratorExtensionContext gccDeclaratorExtension(int i) {
			return GetRuleContext<GccDeclaratorExtensionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftBracket() { return GetToken(CParser.LeftBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightBracket() { return GetToken(CParser.RightBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeQualifierListContext typeQualifierList() {
			return GetRuleContext<TypeQualifierListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentExpressionContext assignmentExpression() {
			return GetRuleContext<AssignmentExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Static() { return GetToken(CParser.Static, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Star() { return GetToken(CParser.Star, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParameterTypeListContext parameterTypeList() {
			return GetRuleContext<ParameterTypeListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DirectAbstractDeclaratorContext directAbstractDeclarator() {
			return GetRuleContext<DirectAbstractDeclaratorContext>(0);
		}
		public DirectAbstractDeclaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_directAbstractDeclarator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.EnterDirectAbstractDeclarator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.ExitDirectAbstractDeclarator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDirectAbstractDeclarator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DirectAbstractDeclaratorContext directAbstractDeclarator() {
		return directAbstractDeclarator(0);
	}

	private DirectAbstractDeclaratorContext directAbstractDeclarator(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		DirectAbstractDeclaratorContext _localctx = new DirectAbstractDeclaratorContext(Context, _parentState);
		DirectAbstractDeclaratorContext _prevctx = _localctx;
		int _startState = 124;
		EnterRecursionRule(_localctx, 124, RULE_directAbstractDeclarator, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 816;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,88,Context) ) {
			case 1:
				{
				State = 771;
				Match(LeftParen);
				State = 772;
				abstractDeclarator();
				State = 773;
				Match(RightParen);
				State = 777;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,82,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 774;
						gccDeclaratorExtension();
						}
						} 
					}
					State = 779;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,82,Context);
				}
				}
				break;
			case 2:
				{
				State = 780;
				Match(LeftBracket);
				State = 782;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 76562293193703424L) != 0)) {
					{
					State = 781;
					typeQualifierList();
					}
				}

				State = 785;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 612507141508431886L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 1055531215745025L) != 0)) {
					{
					State = 784;
					assignmentExpression();
					}
				}

				State = 787;
				Match(RightBracket);
				}
				break;
			case 3:
				{
				State = 788;
				Match(LeftBracket);
				State = 789;
				Match(Static);
				State = 791;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 76562293193703424L) != 0)) {
					{
					State = 790;
					typeQualifierList();
					}
				}

				State = 793;
				assignmentExpression();
				State = 794;
				Match(RightBracket);
				}
				break;
			case 4:
				{
				State = 796;
				Match(LeftBracket);
				State = 797;
				typeQualifierList();
				State = 798;
				Match(Static);
				State = 799;
				assignmentExpression();
				State = 800;
				Match(RightBracket);
				}
				break;
			case 5:
				{
				State = 802;
				Match(LeftBracket);
				State = 803;
				Match(Star);
				State = 804;
				Match(RightBracket);
				}
				break;
			case 6:
				{
				State = 805;
				Match(LeftParen);
				State = 807;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -6386264861217519630L) != 0) || _la==Identifier) {
					{
					State = 806;
					parameterTypeList();
					}
				}

				State = 809;
				Match(RightParen);
				State = 813;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,87,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 810;
						gccDeclaratorExtension();
						}
						} 
					}
					State = 815;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,87,Context);
				}
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 861;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,95,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 859;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,94,Context) ) {
					case 1:
						{
						_localctx = new DirectAbstractDeclaratorContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_directAbstractDeclarator);
						State = 818;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 819;
						Match(LeftBracket);
						State = 821;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 76562293193703424L) != 0)) {
							{
							State = 820;
							typeQualifierList();
							}
						}

						State = 824;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 612507141508431886L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 1055531215745025L) != 0)) {
							{
							State = 823;
							assignmentExpression();
							}
						}

						State = 826;
						Match(RightBracket);
						}
						break;
					case 2:
						{
						_localctx = new DirectAbstractDeclaratorContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_directAbstractDeclarator);
						State = 827;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 828;
						Match(LeftBracket);
						State = 829;
						Match(Static);
						State = 831;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 76562293193703424L) != 0)) {
							{
							State = 830;
							typeQualifierList();
							}
						}

						State = 833;
						assignmentExpression();
						State = 834;
						Match(RightBracket);
						}
						break;
					case 3:
						{
						_localctx = new DirectAbstractDeclaratorContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_directAbstractDeclarator);
						State = 836;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 837;
						Match(LeftBracket);
						State = 838;
						typeQualifierList();
						State = 839;
						Match(Static);
						State = 840;
						assignmentExpression();
						State = 841;
						Match(RightBracket);
						}
						break;
					case 4:
						{
						_localctx = new DirectAbstractDeclaratorContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_directAbstractDeclarator);
						State = 843;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 844;
						Match(LeftBracket);
						State = 845;
						Match(Star);
						State = 846;
						Match(RightBracket);
						}
						break;
					case 5:
						{
						_localctx = new DirectAbstractDeclaratorContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_directAbstractDeclarator);
						State = 847;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 848;
						Match(LeftParen);
						State = 850;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -6386264861217519630L) != 0) || _la==Identifier) {
							{
							State = 849;
							parameterTypeList();
							}
						}

						State = 852;
						Match(RightParen);
						State = 856;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,93,Context);
						while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
							if ( _alt==1 ) {
								{
								{
								State = 853;
								gccDeclaratorExtension();
								}
								} 
							}
							State = 858;
							ErrorHandler.Sync(this);
							_alt = Interpreter.AdaptivePredict(TokenStream,93,Context);
						}
						}
						break;
					}
					} 
				}
				State = 863;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,95,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class TypedefNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(CParser.Identifier, 0); }
		public TypedefNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typedefName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.EnterTypedefName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.ExitTypedefName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypedefName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypedefNameContext typedefName() {
		TypedefNameContext _localctx = new TypedefNameContext(Context, State);
		EnterRule(_localctx, 126, RULE_typedefName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 864;
			Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InitializerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentExpressionContext assignmentExpression() {
			return GetRuleContext<AssignmentExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftBrace() { return GetToken(CParser.LeftBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InitializerListContext initializerList() {
			return GetRuleContext<InitializerListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightBrace() { return GetToken(CParser.RightBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma() { return GetToken(CParser.Comma, 0); }
		public InitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_initializer; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.EnterInitializer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.ExitInitializer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInitializer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InitializerContext initializer() {
		InitializerContext _localctx = new InitializerContext(Context, State);
		EnterRule(_localctx, 128, RULE_initializer);
		int _la;
		try {
			State = 874;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__0:
			case T__1:
			case T__2:
			case Sizeof:
			case Alignof:
			case Generic:
			case LeftParen:
			case Plus:
			case PlusPlus:
			case Minus:
			case MinusMinus:
			case Star:
			case And:
			case AndAnd:
			case Not:
			case Tilde:
			case Identifier:
			case Constant:
			case DigitSequence:
			case StringLiteral:
				EnterOuterAlt(_localctx, 1);
				{
				State = 866;
				assignmentExpression();
				}
				break;
			case LeftBrace:
				EnterOuterAlt(_localctx, 2);
				{
				State = 867;
				Match(LeftBrace);
				State = 868;
				initializerList();
				State = 870;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Comma) {
					{
					State = 869;
					Match(Comma);
					}
				}

				State = 872;
				Match(RightBrace);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InitializerListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public InitializerContext[] initializer() {
			return GetRuleContexts<InitializerContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InitializerContext initializer(int i) {
			return GetRuleContext<InitializerContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DesignationContext[] designation() {
			return GetRuleContexts<DesignationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DesignationContext designation(int i) {
			return GetRuleContext<DesignationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(CParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(CParser.Comma, i);
		}
		public InitializerListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_initializerList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.EnterInitializerList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.ExitInitializerList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInitializerList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InitializerListContext initializerList() {
		InitializerListContext _localctx = new InitializerListContext(Context, State);
		EnterRule(_localctx, 130, RULE_initializerList);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 877;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LeftBracket || _la==Dot) {
				{
				State = 876;
				designation();
				}
			}

			State = 879;
			initializer();
			State = 887;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,100,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 880;
					Match(Comma);
					State = 882;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==LeftBracket || _la==Dot) {
						{
						State = 881;
						designation();
						}
					}

					State = 884;
					initializer();
					}
					} 
				}
				State = 889;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,100,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DesignationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DesignatorListContext designatorList() {
			return GetRuleContext<DesignatorListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Assign() { return GetToken(CParser.Assign, 0); }
		public DesignationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_designation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.EnterDesignation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.ExitDesignation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDesignation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DesignationContext designation() {
		DesignationContext _localctx = new DesignationContext(Context, State);
		EnterRule(_localctx, 132, RULE_designation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 890;
			designatorList();
			State = 891;
			Match(Assign);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DesignatorListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DesignatorContext[] designator() {
			return GetRuleContexts<DesignatorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DesignatorContext designator(int i) {
			return GetRuleContext<DesignatorContext>(i);
		}
		public DesignatorListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_designatorList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.EnterDesignatorList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.ExitDesignatorList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDesignatorList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DesignatorListContext designatorList() {
		DesignatorListContext _localctx = new DesignatorListContext(Context, State);
		EnterRule(_localctx, 134, RULE_designatorList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 894;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 893;
				designator();
				}
				}
				State = 896;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==LeftBracket || _la==Dot );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DesignatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftBracket() { return GetToken(CParser.LeftBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConstantExpressionContext constantExpression() {
			return GetRuleContext<ConstantExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightBracket() { return GetToken(CParser.RightBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dot() { return GetToken(CParser.Dot, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(CParser.Identifier, 0); }
		public DesignatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_designator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.EnterDesignator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.ExitDesignator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDesignator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DesignatorContext designator() {
		DesignatorContext _localctx = new DesignatorContext(Context, State);
		EnterRule(_localctx, 136, RULE_designator);
		try {
			State = 904;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LeftBracket:
				EnterOuterAlt(_localctx, 1);
				{
				State = 898;
				Match(LeftBracket);
				State = 899;
				constantExpression();
				State = 900;
				Match(RightBracket);
				}
				break;
			case Dot:
				EnterOuterAlt(_localctx, 2);
				{
				State = 902;
				Match(Dot);
				State = 903;
				Match(Identifier);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StaticAssertDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StaticAssert() { return GetToken(CParser.StaticAssert, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParen() { return GetToken(CParser.LeftParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConstantExpressionContext constantExpression() {
			return GetRuleContext<ConstantExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma() { return GetToken(CParser.Comma, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParen() { return GetToken(CParser.RightParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semi() { return GetToken(CParser.Semi, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] StringLiteral() { return GetTokens(CParser.StringLiteral); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringLiteral(int i) {
			return GetToken(CParser.StringLiteral, i);
		}
		public StaticAssertDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_staticAssertDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.EnterStaticAssertDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.ExitStaticAssertDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStaticAssertDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StaticAssertDeclarationContext staticAssertDeclaration() {
		StaticAssertDeclarationContext _localctx = new StaticAssertDeclarationContext(Context, State);
		EnterRule(_localctx, 138, RULE_staticAssertDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 906;
			Match(StaticAssert);
			State = 907;
			Match(LeftParen);
			State = 908;
			constantExpression();
			State = 909;
			Match(Comma);
			State = 911;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 910;
				Match(StringLiteral);
				}
				}
				State = 913;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==StringLiteral );
			State = 915;
			Match(RightParen);
			State = 916;
			Match(Semi);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LabeledStatementContext labeledStatement() {
			return GetRuleContext<LabeledStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CompoundStatementContext compoundStatement() {
			return GetRuleContext<CompoundStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionStatementContext expressionStatement() {
			return GetRuleContext<ExpressionStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectionStatementContext selectionStatement() {
			return GetRuleContext<SelectionStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IterationStatementContext iterationStatement() {
			return GetRuleContext<IterationStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public JumpStatementContext jumpStatement() {
			return GetRuleContext<JumpStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParen() { return GetToken(CParser.LeftParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParen() { return GetToken(CParser.RightParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semi() { return GetToken(CParser.Semi, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Volatile() { return GetToken(CParser.Volatile, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LogicalOrExpressionContext[] logicalOrExpression() {
			return GetRuleContexts<LogicalOrExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LogicalOrExpressionContext logicalOrExpression(int i) {
			return GetRuleContext<LogicalOrExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Colon() { return GetTokens(CParser.Colon); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon(int i) {
			return GetToken(CParser.Colon, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(CParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(CParser.Comma, i);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 140, RULE_statement);
		int _la;
		try {
			State = 955;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,109,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 918;
				labeledStatement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 919;
				compoundStatement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 920;
				expressionStatement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 921;
				selectionStatement();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 922;
				iterationStatement();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 923;
				jumpStatement();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 924;
				_la = TokenStream.LA(1);
				if ( !(_la==T__15 || _la==T__17) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 925;
				_la = TokenStream.LA(1);
				if ( !(_la==T__18 || _la==Volatile) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 926;
				Match(LeftParen);
				State = 935;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 612507141508431886L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 1055531215745025L) != 0)) {
					{
					State = 927;
					logicalOrExpression();
					State = 932;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==Comma) {
						{
						{
						State = 928;
						Match(Comma);
						State = 929;
						logicalOrExpression();
						}
						}
						State = 934;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 950;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==Colon) {
					{
					{
					State = 937;
					Match(Colon);
					State = 946;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 612507141508431886L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 1055531215745025L) != 0)) {
						{
						State = 938;
						logicalOrExpression();
						State = 943;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						while (_la==Comma) {
							{
							{
							State = 939;
							Match(Comma);
							State = 940;
							logicalOrExpression();
							}
							}
							State = 945;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						}
						}
					}

					}
					}
					State = 952;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 953;
				Match(RightParen);
				State = 954;
				Match(Semi);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LabeledStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(CParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(CParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Case() { return GetToken(CParser.Case, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConstantExpressionContext constantExpression() {
			return GetRuleContext<ConstantExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Default() { return GetToken(CParser.Default, 0); }
		public LabeledStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_labeledStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.EnterLabeledStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.ExitLabeledStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLabeledStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LabeledStatementContext labeledStatement() {
		LabeledStatementContext _localctx = new LabeledStatementContext(Context, State);
		EnterRule(_localctx, 142, RULE_labeledStatement);
		try {
			State = 970;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 957;
				Match(Identifier);
				State = 958;
				Match(Colon);
				State = 960;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,110,Context) ) {
				case 1:
					{
					State = 959;
					statement();
					}
					break;
				}
				}
				break;
			case Case:
				EnterOuterAlt(_localctx, 2);
				{
				State = 962;
				Match(Case);
				State = 963;
				constantExpression();
				State = 964;
				Match(Colon);
				State = 965;
				statement();
				}
				break;
			case Default:
				EnterOuterAlt(_localctx, 3);
				{
				State = 967;
				Match(Default);
				State = 968;
				Match(Colon);
				State = 969;
				statement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompoundStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftBrace() { return GetToken(CParser.LeftBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightBrace() { return GetToken(CParser.RightBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockItemListContext blockItemList() {
			return GetRuleContext<BlockItemListContext>(0);
		}
		public CompoundStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compoundStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.EnterCompoundStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.ExitCompoundStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompoundStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompoundStatementContext compoundStatement() {
		CompoundStatementContext _localctx = new CompoundStatementContext(Context, State);
		EnterRule(_localctx, 144, RULE_compoundStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 972;
			Match(LeftBrace);
			State = 974;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -1152921505144305666L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 1055531484180497L) != 0)) {
				{
				State = 973;
				blockItemList();
				}
			}

			State = 976;
			Match(RightBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockItemListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockItemContext[] blockItem() {
			return GetRuleContexts<BlockItemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockItemContext blockItem(int i) {
			return GetRuleContext<BlockItemContext>(i);
		}
		public BlockItemListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockItemList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.EnterBlockItemList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.ExitBlockItemList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockItemList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockItemListContext blockItemList() {
		BlockItemListContext _localctx = new BlockItemListContext(Context, State);
		EnterRule(_localctx, 146, RULE_blockItemList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 979;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 978;
				blockItem();
				}
				}
				State = 981;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & -1152921505144305666L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 1055531484180497L) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockItemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationContext declaration() {
			return GetRuleContext<DeclarationContext>(0);
		}
		public BlockItemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockItem; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.EnterBlockItem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.ExitBlockItem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockItem(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockItemContext blockItem() {
		BlockItemContext _localctx = new BlockItemContext(Context, State);
		EnterRule(_localctx, 148, RULE_blockItem);
		try {
			State = 985;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,114,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 983;
				statement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 984;
				declaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semi() { return GetToken(CParser.Semi, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ExpressionStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.EnterExpressionStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.ExitExpressionStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionStatementContext expressionStatement() {
		ExpressionStatementContext _localctx = new ExpressionStatementContext(Context, State);
		EnterRule(_localctx, 150, RULE_expressionStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 988;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 612507141508431886L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 1055531215745025L) != 0)) {
				{
				State = 987;
				expression();
				}
			}

			State = 990;
			Match(Semi);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectionStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode If() { return GetToken(CParser.If, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParen() { return GetToken(CParser.LeftParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParen() { return GetToken(CParser.RightParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Else() { return GetToken(CParser.Else, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Switch() { return GetToken(CParser.Switch, 0); }
		public SelectionStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectionStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.EnterSelectionStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.ExitSelectionStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectionStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectionStatementContext selectionStatement() {
		SelectionStatementContext _localctx = new SelectionStatementContext(Context, State);
		EnterRule(_localctx, 152, RULE_selectionStatement);
		try {
			State = 1007;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case If:
				EnterOuterAlt(_localctx, 1);
				{
				State = 992;
				Match(If);
				State = 993;
				Match(LeftParen);
				State = 994;
				expression();
				State = 995;
				Match(RightParen);
				State = 996;
				statement();
				State = 999;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,116,Context) ) {
				case 1:
					{
					State = 997;
					Match(Else);
					State = 998;
					statement();
					}
					break;
				}
				}
				break;
			case Switch:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1001;
				Match(Switch);
				State = 1002;
				Match(LeftParen);
				State = 1003;
				expression();
				State = 1004;
				Match(RightParen);
				State = 1005;
				statement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IterationStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode While() { return GetToken(CParser.While, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParen() { return GetToken(CParser.LeftParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParen() { return GetToken(CParser.RightParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Do() { return GetToken(CParser.Do, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semi() { return GetToken(CParser.Semi, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode For() { return GetToken(CParser.For, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ForConditionContext forCondition() {
			return GetRuleContext<ForConditionContext>(0);
		}
		public IterationStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iterationStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.EnterIterationStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.ExitIterationStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIterationStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IterationStatementContext iterationStatement() {
		IterationStatementContext _localctx = new IterationStatementContext(Context, State);
		EnterRule(_localctx, 154, RULE_iterationStatement);
		try {
			State = 1029;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case While:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1009;
				Match(While);
				State = 1010;
				Match(LeftParen);
				State = 1011;
				expression();
				State = 1012;
				Match(RightParen);
				State = 1013;
				statement();
				}
				break;
			case Do:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1015;
				Match(Do);
				State = 1016;
				statement();
				State = 1017;
				Match(While);
				State = 1018;
				Match(LeftParen);
				State = 1019;
				expression();
				State = 1020;
				Match(RightParen);
				State = 1021;
				Match(Semi);
				}
				break;
			case For:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1023;
				Match(For);
				State = 1024;
				Match(LeftParen);
				State = 1025;
				forCondition();
				State = 1026;
				Match(RightParen);
				State = 1027;
				statement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForConditionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Semi() { return GetTokens(CParser.Semi); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semi(int i) {
			return GetToken(CParser.Semi, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForDeclarationContext forDeclaration() {
			return GetRuleContext<ForDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForExpressionContext[] forExpression() {
			return GetRuleContexts<ForExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForExpressionContext forExpression(int i) {
			return GetRuleContext<ForExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ForConditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forCondition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.EnterForCondition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.ExitForCondition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForCondition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForConditionContext forCondition() {
		ForConditionContext _localctx = new ForConditionContext(Context, State);
		EnterRule(_localctx, 156, RULE_forCondition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1035;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,120,Context) ) {
			case 1:
				{
				State = 1031;
				forDeclaration();
				}
				break;
			case 2:
				{
				State = 1033;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 612507141508431886L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 1055531215745025L) != 0)) {
					{
					State = 1032;
					expression();
					}
				}

				}
				break;
			}
			State = 1037;
			Match(Semi);
			State = 1039;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 612507141508431886L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 1055531215745025L) != 0)) {
				{
				State = 1038;
				forExpression();
				}
			}

			State = 1041;
			Match(Semi);
			State = 1043;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 612507141508431886L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 1055531215745025L) != 0)) {
				{
				State = 1042;
				forExpression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationSpecifiersContext declarationSpecifiers() {
			return GetRuleContext<DeclarationSpecifiersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InitDeclaratorListContext initDeclaratorList() {
			return GetRuleContext<InitDeclaratorListContext>(0);
		}
		public ForDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.EnterForDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.ExitForDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForDeclarationContext forDeclaration() {
		ForDeclarationContext _localctx = new ForDeclarationContext(Context, State);
		EnterRule(_localctx, 158, RULE_forDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1045;
			declarationSpecifiers();
			State = 1047;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 64000L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 70368752631809L) != 0)) {
				{
				State = 1046;
				initDeclaratorList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentExpressionContext[] assignmentExpression() {
			return GetRuleContexts<AssignmentExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentExpressionContext assignmentExpression(int i) {
			return GetRuleContext<AssignmentExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(CParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(CParser.Comma, i);
		}
		public ForExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.EnterForExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.ExitForExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForExpressionContext forExpression() {
		ForExpressionContext _localctx = new ForExpressionContext(Context, State);
		EnterRule(_localctx, 160, RULE_forExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1049;
			assignmentExpression();
			State = 1054;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 1050;
				Match(Comma);
				State = 1051;
				assignmentExpression();
				}
				}
				State = 1056;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JumpStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semi() { return GetToken(CParser.Semi, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Goto() { return GetToken(CParser.Goto, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(CParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Continue() { return GetToken(CParser.Continue, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Break() { return GetToken(CParser.Break, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Return() { return GetToken(CParser.Return, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UnaryExpressionContext unaryExpression() {
			return GetRuleContext<UnaryExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public JumpStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_jumpStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.EnterJumpStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.ExitJumpStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJumpStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public JumpStatementContext jumpStatement() {
		JumpStatementContext _localctx = new JumpStatementContext(Context, State);
		EnterRule(_localctx, 162, RULE_jumpStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1067;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,126,Context) ) {
			case 1:
				{
				State = 1057;
				Match(Goto);
				State = 1058;
				Match(Identifier);
				}
				break;
			case 2:
				{
				State = 1059;
				Match(Continue);
				}
				break;
			case 3:
				{
				State = 1060;
				Match(Break);
				}
				break;
			case 4:
				{
				State = 1061;
				Match(Return);
				State = 1063;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 612507141508431886L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 1055531215745025L) != 0)) {
					{
					State = 1062;
					expression();
					}
				}

				}
				break;
			case 5:
				{
				State = 1065;
				Match(Goto);
				State = 1066;
				unaryExpression();
				}
				break;
			}
			State = 1069;
			Match(Semi);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompilationUnitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(CParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TranslationUnitContext translationUnit() {
			return GetRuleContext<TranslationUnitContext>(0);
		}
		public CompilationUnitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compilationUnit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.EnterCompilationUnit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.ExitCompilationUnit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompilationUnit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompilationUnitContext compilationUnit() {
		CompilationUnitContext _localctx = new CompilationUnitContext(Context, State);
		EnterRule(_localctx, 164, RULE_compilationUnit);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1072;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -1774578842790068238L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 70369021067265L) != 0)) {
				{
				State = 1071;
				translationUnit();
				}
			}

			State = 1074;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TranslationUnitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExternalDeclarationContext[] externalDeclaration() {
			return GetRuleContexts<ExternalDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExternalDeclarationContext externalDeclaration(int i) {
			return GetRuleContext<ExternalDeclarationContext>(i);
		}
		public TranslationUnitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_translationUnit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.EnterTranslationUnit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.ExitTranslationUnit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTranslationUnit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TranslationUnitContext translationUnit() {
		TranslationUnitContext _localctx = new TranslationUnitContext(Context, State);
		EnterRule(_localctx, 166, RULE_translationUnit);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1077;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 1076;
				externalDeclaration();
				}
				}
				State = 1079;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & -1774578842790068238L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 70369021067265L) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExternalDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDefinitionContext functionDefinition() {
			return GetRuleContext<FunctionDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationContext declaration() {
			return GetRuleContext<DeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semi() { return GetToken(CParser.Semi, 0); }
		public ExternalDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_externalDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.EnterExternalDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.ExitExternalDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExternalDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExternalDeclarationContext externalDeclaration() {
		ExternalDeclarationContext _localctx = new ExternalDeclarationContext(Context, State);
		EnterRule(_localctx, 168, RULE_externalDeclaration);
		try {
			State = 1084;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,129,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1081;
				functionDefinition();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1082;
				declaration();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1083;
				Match(Semi);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DeclaratorContext declarator() {
			return GetRuleContext<DeclaratorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CompoundStatementContext compoundStatement() {
			return GetRuleContext<CompoundStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationSpecifiersContext declarationSpecifiers() {
			return GetRuleContext<DeclarationSpecifiersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationListContext declarationList() {
			return GetRuleContext<DeclarationListContext>(0);
		}
		public FunctionDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.EnterFunctionDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.ExitFunctionDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionDefinitionContext functionDefinition() {
		FunctionDefinitionContext _localctx = new FunctionDefinitionContext(Context, State);
		EnterRule(_localctx, 170, RULE_functionDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1087;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,130,Context) ) {
			case 1:
				{
				State = 1086;
				declarationSpecifiers();
				}
				break;
			}
			State = 1089;
			declarator();
			State = 1091;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -1774578842790131726L) != 0) || _la==Identifier) {
				{
				State = 1090;
				declarationList();
				}
			}

			State = 1093;
			compoundStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationContext[] declaration() {
			return GetRuleContexts<DeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationContext declaration(int i) {
			return GetRuleContext<DeclarationContext>(i);
		}
		public DeclarationListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declarationList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.EnterDeclarationList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.ExitDeclarationList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclarationList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationListContext declarationList() {
		DeclarationListContext _localctx = new DeclarationListContext(Context, State);
		EnterRule(_localctx, 172, RULE_declarationList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1096;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 1095;
				declaration();
				}
				}
				State = 1098;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & -1774578842790131726L) != 0) || _la==Identifier );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 48: return directDeclarator_sempred((DirectDeclaratorContext)_localctx, predIndex);
		case 62: return directAbstractDeclarator_sempred((DirectAbstractDeclaratorContext)_localctx, predIndex);
		}
		return true;
	}
	private bool directDeclarator_sempred(DirectDeclaratorContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 9);
		case 1: return Precpred(Context, 8);
		case 2: return Precpred(Context, 7);
		case 3: return Precpred(Context, 6);
		case 4: return Precpred(Context, 5);
		case 5: return Precpred(Context, 4);
		}
		return true;
	}
	private bool directAbstractDeclarator_sempred(DirectAbstractDeclaratorContext _localctx, int predIndex) {
		switch (predIndex) {
		case 6: return Precpred(Context, 5);
		case 7: return Precpred(Context, 4);
		case 8: return Precpred(Context, 3);
		case 9: return Precpred(Context, 2);
		case 10: return Precpred(Context, 1);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,120,1101,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,
		7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,
		2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,
		2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,
		2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,
		2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,
		2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,
		2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,
		2,85,7,85,2,86,7,86,1,0,1,0,1,0,4,0,178,8,0,11,0,12,0,179,1,0,1,0,1,0,
		1,0,1,0,1,0,3,0,188,8,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,
		0,1,0,1,0,1,0,1,0,1,0,1,0,3,0,208,8,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,
		1,2,1,2,5,2,220,8,2,10,2,12,2,223,9,2,1,3,1,3,3,3,227,8,3,1,3,1,3,1,3,
		1,4,1,4,3,4,234,8,4,1,4,1,4,1,4,1,4,1,4,1,4,3,4,242,8,4,1,4,1,4,3,4,246,
		8,4,1,4,1,4,1,4,1,4,1,4,1,4,3,4,254,8,4,1,4,1,4,1,4,1,4,1,4,5,4,261,8,
		4,10,4,12,4,264,9,4,1,5,1,5,1,5,5,5,269,8,5,10,5,12,5,272,9,5,1,6,5,6,
		275,8,6,10,6,12,6,278,9,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,
		3,6,291,8,6,1,7,1,7,1,8,3,8,296,8,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,3,8,305,
		8,8,1,9,1,9,1,9,5,9,310,8,9,10,9,12,9,313,9,9,1,10,1,10,1,10,5,10,318,
		8,10,10,10,12,10,321,9,10,1,11,1,11,1,11,5,11,326,8,11,10,11,12,11,329,
		9,11,1,12,1,12,1,12,5,12,334,8,12,10,12,12,12,337,9,12,1,13,1,13,1,13,
		5,13,342,8,13,10,13,12,13,345,9,13,1,14,1,14,1,14,5,14,350,8,14,10,14,
		12,14,353,9,14,1,15,1,15,1,15,5,15,358,8,15,10,15,12,15,361,9,15,1,16,
		1,16,1,16,5,16,366,8,16,10,16,12,16,369,9,16,1,17,1,17,1,17,5,17,374,8,
		17,10,17,12,17,377,9,17,1,18,1,18,1,18,5,18,382,8,18,10,18,12,18,385,9,
		18,1,19,1,19,1,19,1,19,1,19,1,19,3,19,393,8,19,1,20,1,20,1,20,1,20,1,20,
		1,20,3,20,401,8,20,1,21,1,21,1,22,1,22,1,22,5,22,408,8,22,10,22,12,22,
		411,9,22,1,23,1,23,1,24,1,24,3,24,417,8,24,1,24,1,24,1,24,3,24,422,8,24,
		1,25,4,25,425,8,25,11,25,12,25,426,1,26,4,26,430,8,26,11,26,12,26,431,
		1,27,1,27,1,27,1,27,1,27,3,27,439,8,27,1,28,1,28,1,28,5,28,444,8,28,10,
		28,12,28,447,9,28,1,29,1,29,1,29,3,29,452,8,29,1,30,1,30,1,31,1,31,1,31,
		1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,
		1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,3,31,483,8,31,1,32,1,
		32,3,32,487,8,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,3,32,496,8,32,1,33,
		1,33,1,34,4,34,501,8,34,11,34,12,34,502,1,35,1,35,1,35,1,35,1,35,1,35,
		1,35,1,35,3,35,513,8,35,1,36,1,36,3,36,517,8,36,1,36,3,36,520,8,36,1,37,
		1,37,1,37,5,37,525,8,37,10,37,12,37,528,9,37,1,38,1,38,3,38,532,8,38,1,
		38,1,38,3,38,536,8,38,1,39,1,39,3,39,540,8,39,1,39,1,39,1,39,3,39,545,
		8,39,1,39,1,39,1,39,1,39,3,39,551,8,39,1,40,1,40,1,40,5,40,556,8,40,10,
		40,12,40,559,9,40,1,41,1,41,1,41,3,41,564,8,41,1,42,1,42,1,43,1,43,1,43,
		1,43,1,43,1,44,1,44,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,3,45,
		584,8,45,1,46,1,46,1,46,1,46,3,46,590,8,46,1,46,1,46,1,47,3,47,595,8,47,
		1,47,1,47,5,47,599,8,47,10,47,12,47,602,9,47,1,48,1,48,1,48,1,48,1,48,
		1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,3,48,621,8,
		48,1,48,1,48,1,48,3,48,626,8,48,1,48,3,48,629,8,48,1,48,1,48,1,48,1,48,
		1,48,3,48,636,8,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,
		48,1,48,1,48,3,48,651,8,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,
		1,48,3,48,663,8,48,1,48,5,48,666,8,48,10,48,12,48,669,9,48,1,49,1,49,1,
		50,1,50,1,50,4,50,676,8,50,11,50,12,50,677,1,50,1,50,3,50,682,8,50,1,51,
		1,51,1,51,1,51,1,51,1,51,1,51,1,52,3,52,692,8,52,1,52,1,52,3,52,696,8,
		52,5,52,698,8,52,10,52,12,52,701,9,52,1,53,1,53,1,53,3,53,706,8,53,1,53,
		3,53,709,8,53,1,54,1,54,3,54,713,8,54,4,54,715,8,54,11,54,12,54,716,1,
		55,4,55,720,8,55,11,55,12,55,721,1,56,1,56,1,56,3,56,727,8,56,1,57,1,57,
		1,57,5,57,732,8,57,10,57,12,57,735,9,57,1,58,1,58,1,58,1,58,1,58,3,58,
		742,8,58,3,58,744,8,58,1,59,1,59,1,59,5,59,749,8,59,10,59,12,59,752,9,
		59,1,60,1,60,3,60,756,8,60,1,61,1,61,3,61,760,8,61,1,61,1,61,5,61,764,
		8,61,10,61,12,61,767,9,61,3,61,769,8,61,1,62,1,62,1,62,1,62,1,62,5,62,
		776,8,62,10,62,12,62,779,9,62,1,62,1,62,3,62,783,8,62,1,62,3,62,786,8,
		62,1,62,1,62,1,62,1,62,3,62,792,8,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,
		1,62,1,62,1,62,1,62,1,62,1,62,1,62,3,62,808,8,62,1,62,1,62,5,62,812,8,
		62,10,62,12,62,815,9,62,3,62,817,8,62,1,62,1,62,1,62,3,62,822,8,62,1,62,
		3,62,825,8,62,1,62,1,62,1,62,1,62,1,62,3,62,832,8,62,1,62,1,62,1,62,1,
		62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,3,
		62,851,8,62,1,62,1,62,5,62,855,8,62,10,62,12,62,858,9,62,5,62,860,8,62,
		10,62,12,62,863,9,62,1,63,1,63,1,64,1,64,1,64,1,64,3,64,871,8,64,1,64,
		1,64,3,64,875,8,64,1,65,3,65,878,8,65,1,65,1,65,1,65,3,65,883,8,65,1,65,
		5,65,886,8,65,10,65,12,65,889,9,65,1,66,1,66,1,66,1,67,4,67,895,8,67,11,
		67,12,67,896,1,68,1,68,1,68,1,68,1,68,1,68,3,68,905,8,68,1,69,1,69,1,69,
		1,69,1,69,4,69,912,8,69,11,69,12,69,913,1,69,1,69,1,69,1,70,1,70,1,70,
		1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,5,70,931,8,70,10,70,12,70,
		934,9,70,3,70,936,8,70,1,70,1,70,1,70,1,70,5,70,942,8,70,10,70,12,70,945,
		9,70,3,70,947,8,70,5,70,949,8,70,10,70,12,70,952,9,70,1,70,1,70,3,70,956,
		8,70,1,71,1,71,1,71,3,71,961,8,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,
		71,3,71,971,8,71,1,72,1,72,3,72,975,8,72,1,72,1,72,1,73,4,73,980,8,73,
		11,73,12,73,981,1,74,1,74,3,74,986,8,74,1,75,3,75,989,8,75,1,75,1,75,1,
		76,1,76,1,76,1,76,1,76,1,76,1,76,3,76,1000,8,76,1,76,1,76,1,76,1,76,1,
		76,1,76,3,76,1008,8,76,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,
		77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,3,77,1030,8,77,1,
		78,1,78,3,78,1034,8,78,3,78,1036,8,78,1,78,1,78,3,78,1040,8,78,1,78,1,
		78,3,78,1044,8,78,1,79,1,79,3,79,1048,8,79,1,80,1,80,1,80,5,80,1053,8,
		80,10,80,12,80,1056,9,80,1,81,1,81,1,81,1,81,1,81,1,81,3,81,1064,8,81,
		1,81,1,81,3,81,1068,8,81,1,81,1,81,1,82,3,82,1073,8,82,1,82,1,82,1,83,
		4,83,1078,8,83,11,83,12,83,1079,1,84,1,84,1,84,3,84,1085,8,84,1,85,3,85,
		1088,8,85,1,85,1,85,3,85,1092,8,85,1,85,1,85,1,86,4,86,1097,8,86,11,86,
		12,86,1098,1,86,0,2,96,124,87,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,
		30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,
		78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,112,114,116,118,
		120,122,124,126,128,130,132,134,136,138,140,142,144,146,148,150,152,154,
		156,158,160,162,164,166,168,170,172,0,19,1,0,107,108,3,0,44,44,77,77,79,
		79,2,0,44,44,55,55,5,0,76,76,78,78,80,80,83,83,88,89,1,0,80,82,2,0,76,
		76,78,78,1,0,74,75,1,0,70,73,1,0,105,106,1,0,94,104,6,0,20,20,31,31,39,
		39,45,45,48,48,63,63,1,0,4,6,2,0,46,46,49,49,4,0,24,24,40,40,52,52,56,
		56,2,0,9,9,11,15,2,0,64,65,93,93,2,0,80,80,87,87,2,0,16,16,18,18,2,0,19,
		19,52,52,1210,0,207,1,0,0,0,2,209,1,0,0,0,4,216,1,0,0,0,6,226,1,0,0,0,
		8,245,1,0,0,0,10,265,1,0,0,0,12,276,1,0,0,0,14,292,1,0,0,0,16,304,1,0,
		0,0,18,306,1,0,0,0,20,314,1,0,0,0,22,322,1,0,0,0,24,330,1,0,0,0,26,338,
		1,0,0,0,28,346,1,0,0,0,30,354,1,0,0,0,32,362,1,0,0,0,34,370,1,0,0,0,36,
		378,1,0,0,0,38,386,1,0,0,0,40,400,1,0,0,0,42,402,1,0,0,0,44,404,1,0,0,
		0,46,412,1,0,0,0,48,421,1,0,0,0,50,424,1,0,0,0,52,429,1,0,0,0,54,438,1,
		0,0,0,56,440,1,0,0,0,58,448,1,0,0,0,60,453,1,0,0,0,62,482,1,0,0,0,64,495,
		1,0,0,0,66,497,1,0,0,0,68,500,1,0,0,0,70,512,1,0,0,0,72,516,1,0,0,0,74,
		521,1,0,0,0,76,535,1,0,0,0,78,550,1,0,0,0,80,552,1,0,0,0,82,560,1,0,0,
		0,84,565,1,0,0,0,86,567,1,0,0,0,88,572,1,0,0,0,90,583,1,0,0,0,92,585,1,
		0,0,0,94,594,1,0,0,0,96,620,1,0,0,0,98,670,1,0,0,0,100,681,1,0,0,0,102,
		683,1,0,0,0,104,691,1,0,0,0,106,702,1,0,0,0,108,714,1,0,0,0,110,719,1,
		0,0,0,112,723,1,0,0,0,114,728,1,0,0,0,116,743,1,0,0,0,118,745,1,0,0,0,
		120,753,1,0,0,0,122,768,1,0,0,0,124,816,1,0,0,0,126,864,1,0,0,0,128,874,
		1,0,0,0,130,877,1,0,0,0,132,890,1,0,0,0,134,894,1,0,0,0,136,904,1,0,0,
		0,138,906,1,0,0,0,140,955,1,0,0,0,142,970,1,0,0,0,144,972,1,0,0,0,146,
		979,1,0,0,0,148,985,1,0,0,0,150,988,1,0,0,0,152,1007,1,0,0,0,154,1029,
		1,0,0,0,156,1035,1,0,0,0,158,1045,1,0,0,0,160,1049,1,0,0,0,162,1067,1,
		0,0,0,164,1072,1,0,0,0,166,1077,1,0,0,0,168,1084,1,0,0,0,170,1087,1,0,
		0,0,172,1096,1,0,0,0,174,208,5,110,0,0,175,208,5,111,0,0,176,178,5,113,
		0,0,177,176,1,0,0,0,178,179,1,0,0,0,179,177,1,0,0,0,179,180,1,0,0,0,180,
		208,1,0,0,0,181,182,5,64,0,0,182,183,3,44,22,0,183,184,5,65,0,0,184,208,
		1,0,0,0,185,208,3,2,1,0,186,188,5,1,0,0,187,186,1,0,0,0,187,188,1,0,0,
		0,188,189,1,0,0,0,189,190,5,64,0,0,190,191,3,144,72,0,191,192,5,65,0,0,
		192,208,1,0,0,0,193,194,5,2,0,0,194,195,5,64,0,0,195,196,3,12,6,0,196,
		197,5,93,0,0,197,198,3,120,60,0,198,199,5,65,0,0,199,208,1,0,0,0,200,201,
		5,3,0,0,201,202,5,64,0,0,202,203,3,120,60,0,203,204,5,93,0,0,204,205,3,
		12,6,0,205,206,5,65,0,0,206,208,1,0,0,0,207,174,1,0,0,0,207,175,1,0,0,
		0,207,177,1,0,0,0,207,181,1,0,0,0,207,185,1,0,0,0,207,187,1,0,0,0,207,
		193,1,0,0,0,207,200,1,0,0,0,208,1,1,0,0,0,209,210,5,59,0,0,210,211,5,64,
		0,0,211,212,3,40,20,0,212,213,5,93,0,0,213,214,3,4,2,0,214,215,5,65,0,
		0,215,3,1,0,0,0,216,221,3,6,3,0,217,218,5,93,0,0,218,220,3,6,3,0,219,217,
		1,0,0,0,220,223,1,0,0,0,221,219,1,0,0,0,221,222,1,0,0,0,222,5,1,0,0,0,
		223,221,1,0,0,0,224,227,3,120,60,0,225,227,5,26,0,0,226,224,1,0,0,0,226,
		225,1,0,0,0,227,228,1,0,0,0,228,229,5,91,0,0,229,230,3,40,20,0,230,7,1,
		0,0,0,231,246,3,0,0,0,232,234,5,1,0,0,233,232,1,0,0,0,233,234,1,0,0,0,
		234,235,1,0,0,0,235,236,5,64,0,0,236,237,3,120,60,0,237,238,5,65,0,0,238,
		239,5,68,0,0,239,241,3,130,65,0,240,242,5,93,0,0,241,240,1,0,0,0,241,242,
		1,0,0,0,242,243,1,0,0,0,243,244,5,69,0,0,244,246,1,0,0,0,245,231,1,0,0,
		0,245,233,1,0,0,0,246,262,1,0,0,0,247,248,5,66,0,0,248,249,3,44,22,0,249,
		250,5,67,0,0,250,261,1,0,0,0,251,253,5,64,0,0,252,254,3,10,5,0,253,252,
		1,0,0,0,253,254,1,0,0,0,254,255,1,0,0,0,255,261,5,65,0,0,256,257,7,0,0,
		0,257,261,5,110,0,0,258,261,5,77,0,0,259,261,5,79,0,0,260,247,1,0,0,0,
		260,251,1,0,0,0,260,256,1,0,0,0,260,258,1,0,0,0,260,259,1,0,0,0,261,264,
		1,0,0,0,262,260,1,0,0,0,262,263,1,0,0,0,263,9,1,0,0,0,264,262,1,0,0,0,
		265,270,3,40,20,0,266,267,5,93,0,0,267,269,3,40,20,0,268,266,1,0,0,0,269,
		272,1,0,0,0,270,268,1,0,0,0,270,271,1,0,0,0,271,11,1,0,0,0,272,270,1,0,
		0,0,273,275,7,1,0,0,274,273,1,0,0,0,275,278,1,0,0,0,276,274,1,0,0,0,276,
		277,1,0,0,0,277,290,1,0,0,0,278,276,1,0,0,0,279,291,3,8,4,0,280,281,3,
		14,7,0,281,282,3,16,8,0,282,291,1,0,0,0,283,284,7,2,0,0,284,285,5,64,0,
		0,285,286,3,120,60,0,286,287,5,65,0,0,287,291,1,0,0,0,288,289,5,85,0,0,
		289,291,5,110,0,0,290,279,1,0,0,0,290,280,1,0,0,0,290,283,1,0,0,0,290,
		288,1,0,0,0,291,13,1,0,0,0,292,293,7,3,0,0,293,15,1,0,0,0,294,296,5,1,
		0,0,295,294,1,0,0,0,295,296,1,0,0,0,296,297,1,0,0,0,297,298,5,64,0,0,298,
		299,3,120,60,0,299,300,5,65,0,0,300,301,3,16,8,0,301,305,1,0,0,0,302,305,
		3,12,6,0,303,305,5,112,0,0,304,295,1,0,0,0,304,302,1,0,0,0,304,303,1,0,
		0,0,305,17,1,0,0,0,306,311,3,16,8,0,307,308,7,4,0,0,308,310,3,16,8,0,309,
		307,1,0,0,0,310,313,1,0,0,0,311,309,1,0,0,0,311,312,1,0,0,0,312,19,1,0,
		0,0,313,311,1,0,0,0,314,319,3,18,9,0,315,316,7,5,0,0,316,318,3,18,9,0,
		317,315,1,0,0,0,318,321,1,0,0,0,319,317,1,0,0,0,319,320,1,0,0,0,320,21,
		1,0,0,0,321,319,1,0,0,0,322,327,3,20,10,0,323,324,7,6,0,0,324,326,3,20,
		10,0,325,323,1,0,0,0,326,329,1,0,0,0,327,325,1,0,0,0,327,328,1,0,0,0,328,
		23,1,0,0,0,329,327,1,0,0,0,330,335,3,22,11,0,331,332,7,7,0,0,332,334,3,
		22,11,0,333,331,1,0,0,0,334,337,1,0,0,0,335,333,1,0,0,0,335,336,1,0,0,
		0,336,25,1,0,0,0,337,335,1,0,0,0,338,343,3,24,12,0,339,340,7,8,0,0,340,
		342,3,24,12,0,341,339,1,0,0,0,342,345,1,0,0,0,343,341,1,0,0,0,343,344,
		1,0,0,0,344,27,1,0,0,0,345,343,1,0,0,0,346,351,3,26,13,0,347,348,5,83,
		0,0,348,350,3,26,13,0,349,347,1,0,0,0,350,353,1,0,0,0,351,349,1,0,0,0,
		351,352,1,0,0,0,352,29,1,0,0,0,353,351,1,0,0,0,354,359,3,28,14,0,355,356,
		5,87,0,0,356,358,3,28,14,0,357,355,1,0,0,0,358,361,1,0,0,0,359,357,1,0,
		0,0,359,360,1,0,0,0,360,31,1,0,0,0,361,359,1,0,0,0,362,367,3,30,15,0,363,
		364,5,84,0,0,364,366,3,30,15,0,365,363,1,0,0,0,366,369,1,0,0,0,367,365,
		1,0,0,0,367,368,1,0,0,0,368,33,1,0,0,0,369,367,1,0,0,0,370,375,3,32,16,
		0,371,372,5,85,0,0,372,374,3,32,16,0,373,371,1,0,0,0,374,377,1,0,0,0,375,
		373,1,0,0,0,375,376,1,0,0,0,376,35,1,0,0,0,377,375,1,0,0,0,378,383,3,34,
		17,0,379,380,5,86,0,0,380,382,3,34,17,0,381,379,1,0,0,0,382,385,1,0,0,
		0,383,381,1,0,0,0,383,384,1,0,0,0,384,37,1,0,0,0,385,383,1,0,0,0,386,392,
		3,36,18,0,387,388,5,90,0,0,388,389,3,44,22,0,389,390,5,91,0,0,390,391,
		3,38,19,0,391,393,1,0,0,0,392,387,1,0,0,0,392,393,1,0,0,0,393,39,1,0,0,
		0,394,401,3,38,19,0,395,396,3,12,6,0,396,397,3,42,21,0,397,398,3,40,20,
		0,398,401,1,0,0,0,399,401,5,112,0,0,400,394,1,0,0,0,400,395,1,0,0,0,400,
		399,1,0,0,0,401,41,1,0,0,0,402,403,7,9,0,0,403,43,1,0,0,0,404,409,3,40,
		20,0,405,406,5,93,0,0,406,408,3,40,20,0,407,405,1,0,0,0,408,411,1,0,0,
		0,409,407,1,0,0,0,409,410,1,0,0,0,410,45,1,0,0,0,411,409,1,0,0,0,412,413,
		3,38,19,0,413,47,1,0,0,0,414,416,3,50,25,0,415,417,3,56,28,0,416,415,1,
		0,0,0,416,417,1,0,0,0,417,418,1,0,0,0,418,419,5,92,0,0,419,422,1,0,0,0,
		420,422,3,138,69,0,421,414,1,0,0,0,421,420,1,0,0,0,422,49,1,0,0,0,423,
		425,3,54,27,0,424,423,1,0,0,0,425,426,1,0,0,0,426,424,1,0,0,0,426,427,
		1,0,0,0,427,51,1,0,0,0,428,430,3,54,27,0,429,428,1,0,0,0,430,431,1,0,0,
		0,431,429,1,0,0,0,431,432,1,0,0,0,432,53,1,0,0,0,433,439,3,60,30,0,434,
		439,3,62,31,0,435,439,3,88,44,0,436,439,3,90,45,0,437,439,3,92,46,0,438,
		433,1,0,0,0,438,434,1,0,0,0,438,435,1,0,0,0,438,436,1,0,0,0,438,437,1,
		0,0,0,439,55,1,0,0,0,440,445,3,58,29,0,441,442,5,93,0,0,442,444,3,58,29,
		0,443,441,1,0,0,0,444,447,1,0,0,0,445,443,1,0,0,0,445,446,1,0,0,0,446,
		57,1,0,0,0,447,445,1,0,0,0,448,451,3,94,47,0,449,450,5,94,0,0,450,452,
		3,128,64,0,451,449,1,0,0,0,451,452,1,0,0,0,452,59,1,0,0,0,453,454,7,10,
		0,0,454,61,1,0,0,0,455,483,5,51,0,0,456,483,5,23,0,0,457,483,5,42,0,0,
		458,483,5,37,0,0,459,483,5,38,0,0,460,483,5,32,0,0,461,483,5,28,0,0,462,
		483,5,43,0,0,463,483,5,50,0,0,464,483,5,57,0,0,465,483,5,58,0,0,466,483,
		5,4,0,0,467,483,5,5,0,0,468,483,5,6,0,0,469,470,5,1,0,0,470,471,5,64,0,
		0,471,472,7,11,0,0,472,483,5,65,0,0,473,483,3,86,43,0,474,483,3,64,32,
		0,475,483,3,78,39,0,476,483,3,126,63,0,477,478,5,7,0,0,478,479,5,64,0,
		0,479,480,3,46,23,0,480,481,5,65,0,0,481,483,1,0,0,0,482,455,1,0,0,0,482,
		456,1,0,0,0,482,457,1,0,0,0,482,458,1,0,0,0,482,459,1,0,0,0,482,460,1,
		0,0,0,482,461,1,0,0,0,482,462,1,0,0,0,482,463,1,0,0,0,482,464,1,0,0,0,
		482,465,1,0,0,0,482,466,1,0,0,0,482,467,1,0,0,0,482,468,1,0,0,0,482,469,
		1,0,0,0,482,473,1,0,0,0,482,474,1,0,0,0,482,475,1,0,0,0,482,476,1,0,0,
		0,482,477,1,0,0,0,483,63,1,0,0,0,484,486,3,66,33,0,485,487,5,110,0,0,486,
		485,1,0,0,0,486,487,1,0,0,0,487,488,1,0,0,0,488,489,5,68,0,0,489,490,3,
		68,34,0,490,491,5,69,0,0,491,496,1,0,0,0,492,493,3,66,33,0,493,494,5,110,
		0,0,494,496,1,0,0,0,495,484,1,0,0,0,495,492,1,0,0,0,496,65,1,0,0,0,497,
		498,7,12,0,0,498,67,1,0,0,0,499,501,3,70,35,0,500,499,1,0,0,0,501,502,
		1,0,0,0,502,500,1,0,0,0,502,503,1,0,0,0,503,69,1,0,0,0,504,505,3,72,36,
		0,505,506,3,74,37,0,506,507,5,92,0,0,507,513,1,0,0,0,508,509,3,72,36,0,
		509,510,5,92,0,0,510,513,1,0,0,0,511,513,3,138,69,0,512,504,1,0,0,0,512,
		508,1,0,0,0,512,511,1,0,0,0,513,71,1,0,0,0,514,517,3,62,31,0,515,517,3,
		88,44,0,516,514,1,0,0,0,516,515,1,0,0,0,517,519,1,0,0,0,518,520,3,72,36,
		0,519,518,1,0,0,0,519,520,1,0,0,0,520,73,1,0,0,0,521,526,3,76,38,0,522,
		523,5,93,0,0,523,525,3,76,38,0,524,522,1,0,0,0,525,528,1,0,0,0,526,524,
		1,0,0,0,526,527,1,0,0,0,527,75,1,0,0,0,528,526,1,0,0,0,529,536,3,94,47,
		0,530,532,3,94,47,0,531,530,1,0,0,0,531,532,1,0,0,0,532,533,1,0,0,0,533,
		534,5,91,0,0,534,536,3,46,23,0,535,529,1,0,0,0,535,531,1,0,0,0,536,77,
		1,0,0,0,537,539,5,30,0,0,538,540,5,110,0,0,539,538,1,0,0,0,539,540,1,0,
		0,0,540,541,1,0,0,0,541,542,5,68,0,0,542,544,3,80,40,0,543,545,5,93,0,
		0,544,543,1,0,0,0,544,545,1,0,0,0,545,546,1,0,0,0,546,547,5,69,0,0,547,
		551,1,0,0,0,548,549,5,30,0,0,549,551,5,110,0,0,550,537,1,0,0,0,550,548,
		1,0,0,0,551,79,1,0,0,0,552,557,3,82,41,0,553,554,5,93,0,0,554,556,3,82,
		41,0,555,553,1,0,0,0,556,559,1,0,0,0,557,555,1,0,0,0,557,558,1,0,0,0,558,
		81,1,0,0,0,559,557,1,0,0,0,560,563,3,84,42,0,561,562,5,94,0,0,562,564,
		3,46,23,0,563,561,1,0,0,0,563,564,1,0,0,0,564,83,1,0,0,0,565,566,5,110,
		0,0,566,85,1,0,0,0,567,568,5,56,0,0,568,569,5,64,0,0,569,570,3,120,60,
		0,570,571,5,65,0,0,571,87,1,0,0,0,572,573,7,13,0,0,573,89,1,0,0,0,574,
		584,5,36,0,0,575,584,5,61,0,0,576,584,5,8,0,0,577,584,5,9,0,0,578,584,
		3,102,51,0,579,580,5,10,0,0,580,581,5,64,0,0,581,582,5,110,0,0,582,584,
		5,65,0,0,583,574,1,0,0,0,583,575,1,0,0,0,583,576,1,0,0,0,583,577,1,0,0,
		0,583,578,1,0,0,0,583,579,1,0,0,0,584,91,1,0,0,0,585,586,5,54,0,0,586,
		589,5,64,0,0,587,590,3,120,60,0,588,590,3,46,23,0,589,587,1,0,0,0,589,
		588,1,0,0,0,590,591,1,0,0,0,591,592,5,65,0,0,592,93,1,0,0,0,593,595,3,
		108,54,0,594,593,1,0,0,0,594,595,1,0,0,0,595,596,1,0,0,0,596,600,3,96,
		48,0,597,599,3,100,50,0,598,597,1,0,0,0,599,602,1,0,0,0,600,598,1,0,0,
		0,600,601,1,0,0,0,601,95,1,0,0,0,602,600,1,0,0,0,603,604,6,48,-1,0,604,
		621,5,110,0,0,605,606,5,64,0,0,606,607,3,94,47,0,607,608,5,65,0,0,608,
		621,1,0,0,0,609,610,5,110,0,0,610,611,5,91,0,0,611,621,5,112,0,0,612,613,
		3,98,49,0,613,614,5,110,0,0,614,621,1,0,0,0,615,616,5,64,0,0,616,617,3,
		98,49,0,617,618,3,94,47,0,618,619,5,65,0,0,619,621,1,0,0,0,620,603,1,0,
		0,0,620,605,1,0,0,0,620,609,1,0,0,0,620,612,1,0,0,0,620,615,1,0,0,0,621,
		667,1,0,0,0,622,623,10,9,0,0,623,625,5,66,0,0,624,626,3,110,55,0,625,624,
		1,0,0,0,625,626,1,0,0,0,626,628,1,0,0,0,627,629,3,40,20,0,628,627,1,0,
		0,0,628,629,1,0,0,0,629,630,1,0,0,0,630,666,5,67,0,0,631,632,10,8,0,0,
		632,633,5,66,0,0,633,635,5,45,0,0,634,636,3,110,55,0,635,634,1,0,0,0,635,
		636,1,0,0,0,636,637,1,0,0,0,637,638,3,40,20,0,638,639,5,67,0,0,639,666,
		1,0,0,0,640,641,10,7,0,0,641,642,5,66,0,0,642,643,3,110,55,0,643,644,5,
		45,0,0,644,645,3,40,20,0,645,646,5,67,0,0,646,666,1,0,0,0,647,648,10,6,
		0,0,648,650,5,66,0,0,649,651,3,110,55,0,650,649,1,0,0,0,650,651,1,0,0,
		0,651,652,1,0,0,0,652,653,5,80,0,0,653,666,5,67,0,0,654,655,10,5,0,0,655,
		656,5,64,0,0,656,657,3,112,56,0,657,658,5,65,0,0,658,666,1,0,0,0,659,660,
		10,4,0,0,660,662,5,64,0,0,661,663,3,118,59,0,662,661,1,0,0,0,662,663,1,
		0,0,0,663,664,1,0,0,0,664,666,5,65,0,0,665,622,1,0,0,0,665,631,1,0,0,0,
		665,640,1,0,0,0,665,647,1,0,0,0,665,654,1,0,0,0,665,659,1,0,0,0,666,669,
		1,0,0,0,667,665,1,0,0,0,667,668,1,0,0,0,668,97,1,0,0,0,669,667,1,0,0,0,
		670,671,7,14,0,0,671,99,1,0,0,0,672,673,5,16,0,0,673,675,5,64,0,0,674,
		676,5,113,0,0,675,674,1,0,0,0,676,677,1,0,0,0,677,675,1,0,0,0,677,678,
		1,0,0,0,678,679,1,0,0,0,679,682,5,65,0,0,680,682,3,102,51,0,681,672,1,
		0,0,0,681,680,1,0,0,0,682,101,1,0,0,0,683,684,5,17,0,0,684,685,5,64,0,
		0,685,686,5,64,0,0,686,687,3,104,52,0,687,688,5,65,0,0,688,689,5,65,0,
		0,689,103,1,0,0,0,690,692,3,106,53,0,691,690,1,0,0,0,691,692,1,0,0,0,692,
		699,1,0,0,0,693,695,5,93,0,0,694,696,3,106,53,0,695,694,1,0,0,0,695,696,
		1,0,0,0,696,698,1,0,0,0,697,693,1,0,0,0,698,701,1,0,0,0,699,697,1,0,0,
		0,699,700,1,0,0,0,700,105,1,0,0,0,701,699,1,0,0,0,702,708,8,15,0,0,703,
		705,5,64,0,0,704,706,3,10,5,0,705,704,1,0,0,0,705,706,1,0,0,0,706,707,
		1,0,0,0,707,709,5,65,0,0,708,703,1,0,0,0,708,709,1,0,0,0,709,107,1,0,0,
		0,710,712,7,16,0,0,711,713,3,110,55,0,712,711,1,0,0,0,712,713,1,0,0,0,
		713,715,1,0,0,0,714,710,1,0,0,0,715,716,1,0,0,0,716,714,1,0,0,0,716,717,
		1,0,0,0,717,109,1,0,0,0,718,720,3,88,44,0,719,718,1,0,0,0,720,721,1,0,
		0,0,721,719,1,0,0,0,721,722,1,0,0,0,722,111,1,0,0,0,723,726,3,114,57,0,
		724,725,5,93,0,0,725,727,5,109,0,0,726,724,1,0,0,0,726,727,1,0,0,0,727,
		113,1,0,0,0,728,733,3,116,58,0,729,730,5,93,0,0,730,732,3,116,58,0,731,
		729,1,0,0,0,732,735,1,0,0,0,733,731,1,0,0,0,733,734,1,0,0,0,734,115,1,
		0,0,0,735,733,1,0,0,0,736,737,3,50,25,0,737,738,3,94,47,0,738,744,1,0,
		0,0,739,741,3,52,26,0,740,742,3,122,61,0,741,740,1,0,0,0,741,742,1,0,0,
		0,742,744,1,0,0,0,743,736,1,0,0,0,743,739,1,0,0,0,744,117,1,0,0,0,745,
		750,5,110,0,0,746,747,5,93,0,0,747,749,5,110,0,0,748,746,1,0,0,0,749,752,
		1,0,0,0,750,748,1,0,0,0,750,751,1,0,0,0,751,119,1,0,0,0,752,750,1,0,0,
		0,753,755,3,72,36,0,754,756,3,122,61,0,755,754,1,0,0,0,755,756,1,0,0,0,
		756,121,1,0,0,0,757,769,3,108,54,0,758,760,3,108,54,0,759,758,1,0,0,0,
		759,760,1,0,0,0,760,761,1,0,0,0,761,765,3,124,62,0,762,764,3,100,50,0,
		763,762,1,0,0,0,764,767,1,0,0,0,765,763,1,0,0,0,765,766,1,0,0,0,766,769,
		1,0,0,0,767,765,1,0,0,0,768,757,1,0,0,0,768,759,1,0,0,0,769,123,1,0,0,
		0,770,771,6,62,-1,0,771,772,5,64,0,0,772,773,3,122,61,0,773,777,5,65,0,
		0,774,776,3,100,50,0,775,774,1,0,0,0,776,779,1,0,0,0,777,775,1,0,0,0,777,
		778,1,0,0,0,778,817,1,0,0,0,779,777,1,0,0,0,780,782,5,66,0,0,781,783,3,
		110,55,0,782,781,1,0,0,0,782,783,1,0,0,0,783,785,1,0,0,0,784,786,3,40,
		20,0,785,784,1,0,0,0,785,786,1,0,0,0,786,787,1,0,0,0,787,817,5,67,0,0,
		788,789,5,66,0,0,789,791,5,45,0,0,790,792,3,110,55,0,791,790,1,0,0,0,791,
		792,1,0,0,0,792,793,1,0,0,0,793,794,3,40,20,0,794,795,5,67,0,0,795,817,
		1,0,0,0,796,797,5,66,0,0,797,798,3,110,55,0,798,799,5,45,0,0,799,800,3,
		40,20,0,800,801,5,67,0,0,801,817,1,0,0,0,802,803,5,66,0,0,803,804,5,80,
		0,0,804,817,5,67,0,0,805,807,5,64,0,0,806,808,3,112,56,0,807,806,1,0,0,
		0,807,808,1,0,0,0,808,809,1,0,0,0,809,813,5,65,0,0,810,812,3,100,50,0,
		811,810,1,0,0,0,812,815,1,0,0,0,813,811,1,0,0,0,813,814,1,0,0,0,814,817,
		1,0,0,0,815,813,1,0,0,0,816,770,1,0,0,0,816,780,1,0,0,0,816,788,1,0,0,
		0,816,796,1,0,0,0,816,802,1,0,0,0,816,805,1,0,0,0,817,861,1,0,0,0,818,
		819,10,5,0,0,819,821,5,66,0,0,820,822,3,110,55,0,821,820,1,0,0,0,821,822,
		1,0,0,0,822,824,1,0,0,0,823,825,3,40,20,0,824,823,1,0,0,0,824,825,1,0,
		0,0,825,826,1,0,0,0,826,860,5,67,0,0,827,828,10,4,0,0,828,829,5,66,0,0,
		829,831,5,45,0,0,830,832,3,110,55,0,831,830,1,0,0,0,831,832,1,0,0,0,832,
		833,1,0,0,0,833,834,3,40,20,0,834,835,5,67,0,0,835,860,1,0,0,0,836,837,
		10,3,0,0,837,838,5,66,0,0,838,839,3,110,55,0,839,840,5,45,0,0,840,841,
		3,40,20,0,841,842,5,67,0,0,842,860,1,0,0,0,843,844,10,2,0,0,844,845,5,
		66,0,0,845,846,5,80,0,0,846,860,5,67,0,0,847,848,10,1,0,0,848,850,5,64,
		0,0,849,851,3,112,56,0,850,849,1,0,0,0,850,851,1,0,0,0,851,852,1,0,0,0,
		852,856,5,65,0,0,853,855,3,100,50,0,854,853,1,0,0,0,855,858,1,0,0,0,856,
		854,1,0,0,0,856,857,1,0,0,0,857,860,1,0,0,0,858,856,1,0,0,0,859,818,1,
		0,0,0,859,827,1,0,0,0,859,836,1,0,0,0,859,843,1,0,0,0,859,847,1,0,0,0,
		860,863,1,0,0,0,861,859,1,0,0,0,861,862,1,0,0,0,862,125,1,0,0,0,863,861,
		1,0,0,0,864,865,5,110,0,0,865,127,1,0,0,0,866,875,3,40,20,0,867,868,5,
		68,0,0,868,870,3,130,65,0,869,871,5,93,0,0,870,869,1,0,0,0,870,871,1,0,
		0,0,871,872,1,0,0,0,872,873,5,69,0,0,873,875,1,0,0,0,874,866,1,0,0,0,874,
		867,1,0,0,0,875,129,1,0,0,0,876,878,3,132,66,0,877,876,1,0,0,0,877,878,
		1,0,0,0,878,879,1,0,0,0,879,887,3,128,64,0,880,882,5,93,0,0,881,883,3,
		132,66,0,882,881,1,0,0,0,882,883,1,0,0,0,883,884,1,0,0,0,884,886,3,128,
		64,0,885,880,1,0,0,0,886,889,1,0,0,0,887,885,1,0,0,0,887,888,1,0,0,0,888,
		131,1,0,0,0,889,887,1,0,0,0,890,891,3,134,67,0,891,892,5,94,0,0,892,133,
		1,0,0,0,893,895,3,136,68,0,894,893,1,0,0,0,895,896,1,0,0,0,896,894,1,0,
		0,0,896,897,1,0,0,0,897,135,1,0,0,0,898,899,5,66,0,0,899,900,3,46,23,0,
		900,901,5,67,0,0,901,905,1,0,0,0,902,903,5,108,0,0,903,905,5,110,0,0,904,
		898,1,0,0,0,904,902,1,0,0,0,905,137,1,0,0,0,906,907,5,62,0,0,907,908,5,
		64,0,0,908,909,3,46,23,0,909,911,5,93,0,0,910,912,5,113,0,0,911,910,1,
		0,0,0,912,913,1,0,0,0,913,911,1,0,0,0,913,914,1,0,0,0,914,915,1,0,0,0,
		915,916,5,65,0,0,916,917,5,92,0,0,917,139,1,0,0,0,918,956,3,142,71,0,919,
		956,3,144,72,0,920,956,3,150,75,0,921,956,3,152,76,0,922,956,3,154,77,
		0,923,956,3,162,81,0,924,925,7,17,0,0,925,926,7,18,0,0,926,935,5,64,0,
		0,927,932,3,36,18,0,928,929,5,93,0,0,929,931,3,36,18,0,930,928,1,0,0,0,
		931,934,1,0,0,0,932,930,1,0,0,0,932,933,1,0,0,0,933,936,1,0,0,0,934,932,
		1,0,0,0,935,927,1,0,0,0,935,936,1,0,0,0,936,950,1,0,0,0,937,946,5,91,0,
		0,938,943,3,36,18,0,939,940,5,93,0,0,940,942,3,36,18,0,941,939,1,0,0,0,
		942,945,1,0,0,0,943,941,1,0,0,0,943,944,1,0,0,0,944,947,1,0,0,0,945,943,
		1,0,0,0,946,938,1,0,0,0,946,947,1,0,0,0,947,949,1,0,0,0,948,937,1,0,0,
		0,949,952,1,0,0,0,950,948,1,0,0,0,950,951,1,0,0,0,951,953,1,0,0,0,952,
		950,1,0,0,0,953,954,5,65,0,0,954,956,5,92,0,0,955,918,1,0,0,0,955,919,
		1,0,0,0,955,920,1,0,0,0,955,921,1,0,0,0,955,922,1,0,0,0,955,923,1,0,0,
		0,955,924,1,0,0,0,956,141,1,0,0,0,957,958,5,110,0,0,958,960,5,91,0,0,959,
		961,3,140,70,0,960,959,1,0,0,0,960,961,1,0,0,0,961,971,1,0,0,0,962,963,
		5,22,0,0,963,964,3,46,23,0,964,965,5,91,0,0,965,966,3,140,70,0,966,971,
		1,0,0,0,967,968,5,26,0,0,968,969,5,91,0,0,969,971,3,140,70,0,970,957,1,
		0,0,0,970,962,1,0,0,0,970,967,1,0,0,0,971,143,1,0,0,0,972,974,5,68,0,0,
		973,975,3,146,73,0,974,973,1,0,0,0,974,975,1,0,0,0,975,976,1,0,0,0,976,
		977,5,69,0,0,977,145,1,0,0,0,978,980,3,148,74,0,979,978,1,0,0,0,980,981,
		1,0,0,0,981,979,1,0,0,0,981,982,1,0,0,0,982,147,1,0,0,0,983,986,3,140,
		70,0,984,986,3,48,24,0,985,983,1,0,0,0,985,984,1,0,0,0,986,149,1,0,0,0,
		987,989,3,44,22,0,988,987,1,0,0,0,988,989,1,0,0,0,989,990,1,0,0,0,990,
		991,5,92,0,0,991,151,1,0,0,0,992,993,5,35,0,0,993,994,5,64,0,0,994,995,
		3,44,22,0,995,996,5,65,0,0,996,999,3,140,70,0,997,998,5,29,0,0,998,1000,
		3,140,70,0,999,997,1,0,0,0,999,1000,1,0,0,0,1000,1008,1,0,0,0,1001,1002,
		5,47,0,0,1002,1003,5,64,0,0,1003,1004,3,44,22,0,1004,1005,5,65,0,0,1005,
		1006,3,140,70,0,1006,1008,1,0,0,0,1007,992,1,0,0,0,1007,1001,1,0,0,0,1008,
		153,1,0,0,0,1009,1010,5,53,0,0,1010,1011,5,64,0,0,1011,1012,3,44,22,0,
		1012,1013,5,65,0,0,1013,1014,3,140,70,0,1014,1030,1,0,0,0,1015,1016,5,
		27,0,0,1016,1017,3,140,70,0,1017,1018,5,53,0,0,1018,1019,5,64,0,0,1019,
		1020,3,44,22,0,1020,1021,5,65,0,0,1021,1022,5,92,0,0,1022,1030,1,0,0,0,
		1023,1024,5,33,0,0,1024,1025,5,64,0,0,1025,1026,3,156,78,0,1026,1027,5,
		65,0,0,1027,1028,3,140,70,0,1028,1030,1,0,0,0,1029,1009,1,0,0,0,1029,1015,
		1,0,0,0,1029,1023,1,0,0,0,1030,155,1,0,0,0,1031,1036,3,158,79,0,1032,1034,
		3,44,22,0,1033,1032,1,0,0,0,1033,1034,1,0,0,0,1034,1036,1,0,0,0,1035,1031,
		1,0,0,0,1035,1033,1,0,0,0,1036,1037,1,0,0,0,1037,1039,5,92,0,0,1038,1040,
		3,160,80,0,1039,1038,1,0,0,0,1039,1040,1,0,0,0,1040,1041,1,0,0,0,1041,
		1043,5,92,0,0,1042,1044,3,160,80,0,1043,1042,1,0,0,0,1043,1044,1,0,0,0,
		1044,157,1,0,0,0,1045,1047,3,50,25,0,1046,1048,3,56,28,0,1047,1046,1,0,
		0,0,1047,1048,1,0,0,0,1048,159,1,0,0,0,1049,1054,3,40,20,0,1050,1051,5,
		93,0,0,1051,1053,3,40,20,0,1052,1050,1,0,0,0,1053,1056,1,0,0,0,1054,1052,
		1,0,0,0,1054,1055,1,0,0,0,1055,161,1,0,0,0,1056,1054,1,0,0,0,1057,1058,
		5,34,0,0,1058,1068,5,110,0,0,1059,1068,5,25,0,0,1060,1068,5,21,0,0,1061,
		1063,5,41,0,0,1062,1064,3,44,22,0,1063,1062,1,0,0,0,1063,1064,1,0,0,0,
		1064,1068,1,0,0,0,1065,1066,5,34,0,0,1066,1068,3,12,6,0,1067,1057,1,0,
		0,0,1067,1059,1,0,0,0,1067,1060,1,0,0,0,1067,1061,1,0,0,0,1067,1065,1,
		0,0,0,1068,1069,1,0,0,0,1069,1070,5,92,0,0,1070,163,1,0,0,0,1071,1073,
		3,166,83,0,1072,1071,1,0,0,0,1072,1073,1,0,0,0,1073,1074,1,0,0,0,1074,
		1075,5,0,0,1,1075,165,1,0,0,0,1076,1078,3,168,84,0,1077,1076,1,0,0,0,1078,
		1079,1,0,0,0,1079,1077,1,0,0,0,1079,1080,1,0,0,0,1080,167,1,0,0,0,1081,
		1085,3,170,85,0,1082,1085,3,48,24,0,1083,1085,5,92,0,0,1084,1081,1,0,0,
		0,1084,1082,1,0,0,0,1084,1083,1,0,0,0,1085,169,1,0,0,0,1086,1088,3,50,
		25,0,1087,1086,1,0,0,0,1087,1088,1,0,0,0,1088,1089,1,0,0,0,1089,1091,3,
		94,47,0,1090,1092,3,172,86,0,1091,1090,1,0,0,0,1091,1092,1,0,0,0,1092,
		1093,1,0,0,0,1093,1094,3,144,72,0,1094,171,1,0,0,0,1095,1097,3,48,24,0,
		1096,1095,1,0,0,0,1097,1098,1,0,0,0,1098,1096,1,0,0,0,1098,1099,1,0,0,
		0,1099,173,1,0,0,0,133,179,187,207,221,226,233,241,245,253,260,262,270,
		276,290,295,304,311,319,327,335,343,351,359,367,375,383,392,400,409,416,
		421,426,431,438,445,451,482,486,495,502,512,516,519,526,531,535,539,544,
		550,557,563,583,589,594,600,620,625,628,635,650,662,665,667,677,681,691,
		695,699,705,708,712,716,721,726,733,741,743,750,755,759,765,768,777,782,
		785,791,807,813,816,821,824,831,850,856,859,861,870,874,877,882,887,896,
		904,913,932,935,943,946,950,955,960,970,974,981,985,988,999,1007,1029,
		1033,1035,1039,1043,1047,1054,1063,1067,1072,1079,1084,1087,1091,1098
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
